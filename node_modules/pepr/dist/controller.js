#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/runtime/controller.ts
var import_child_process = require("child_process");
var import_crypto = __toESM(require("crypto"));
var import_fs = __toESM(require("fs"));
var import_zlib = require("zlib");
var import_kubernetes_fluent_client2 = require("kubernetes-fluent-client");

// src/lib/logger.ts
var import_pino = require("pino");
var isPrettyLog = process.env.PEPR_PRETTY_LOGS === "true";
var pretty = {
  target: "pino-pretty",
  options: {
    colorize: true
  }
};
var transport = isPrettyLog ? pretty : void 0;
var Log = (0, import_pino.pino)({
  transport
});
if (process.env.LOG_LEVEL) {
  Log.level = process.env.LOG_LEVEL;
}
var logger_default = Log;

// src/templates/data.json
var packageJSON = { name: "pepr", description: "Kubernetes application engine", author: "Defense Unicorns", homepage: "https://github.com/defenseunicorns/pepr", license: "Apache-2.0", bin: "dist/cli.js", repository: "defenseunicorns/pepr", engines: { node: ">=18.0.0" }, version: "0.28.7", main: "dist/lib.js", types: "dist/lib.d.ts", scripts: { "gen-data-json": "node hack/build-template-data.js", prebuild: "rm -fr dist/* && npm run gen-data-json", build: "tsc && node build.mjs", test: "npm run test:unit && npm run test:journey", "test:unit": "npm run gen-data-json && jest src --coverage --detectOpenHandles --coverageDirectory=./coverage", "test:journey": "npm run test:journey:k3d && npm run test:journey:build && npm run test:journey:image && npm run test:journey:run", "test:journey:prep": "if [ ! -d ./pepr-upgrade-test ]; then git clone https://github.com/defenseunicorns/pepr-upgrade-test.git ; fi", "test:journey-wasm": "npm run test:journey:k3d && npm run test:journey:build && npm run test:journey:image && npm run test:journey:run-wasm", "test:journey:k3d": "k3d cluster delete pepr-dev && k3d cluster create pepr-dev --k3s-arg '--debug@server:0' --wait && kubectl rollout status deployment -n kube-system", "test:journey:build": "npm run build && npm pack", "test:journey:image": "docker buildx build --tag pepr:dev . && k3d image import pepr:dev -c pepr-dev", "test:journey:run": "jest --detectOpenHandles journey/entrypoint.test.ts && npm run test:journey:prep && npm run test:journey:upgrade", "test:journey:run-wasm": "jest --detectOpenHandles journey/entrypoint-wasm.test.ts", "test:journey:upgrade": "npm run test:journey:k3d && npm run test:journey:image && jest --detectOpenHandles journey/pepr-upgrade.test.ts", "format:check": "eslint src && prettier src --check", "format:fix": "eslint src --fix && prettier src --write" }, dependencies: { "@types/ramda": "0.29.11", express: "4.19.2", "fast-json-patch": "3.1.1", "kubernetes-fluent-client": "2.3.0", pino: "8.19.0", "pino-pretty": "11.0.0", "prom-client": "15.1.1", ramda: "0.29.1" }, devDependencies: { "@commitlint/cli": "19.2.1", "@commitlint/config-conventional": "19.1.0", "@jest/globals": "29.7.0", "@types/eslint": "8.56.6", "@types/express": "4.17.21", "@types/node": "18.x.x", "@types/node-forge": "1.3.11", "@types/prompts": "2.4.9", "@types/uuid": "9.0.8", jest: "29.7.0", nock: "13.5.4", "ts-jest": "29.1.2" }, peerDependencies: { "@typescript-eslint/eslint-plugin": "6.15.0", "@typescript-eslint/parser": "6.15.0", commander: "11.1.0", esbuild: "0.19.10", eslint: "8.56.0", "node-forge": "1.3.1", prettier: "3.1.1", prompts: "2.4.2", typescript: "5.3.3", uuid: "9.0.1" } };

// src/lib/k8s.ts
var import_kubernetes_fluent_client = require("kubernetes-fluent-client");
var PeprStore = class extends import_kubernetes_fluent_client.GenericKind {
};
var peprStoreGVK = {
  kind: "PeprStore",
  version: "v1",
  group: "pepr.dev"
};
(0, import_kubernetes_fluent_client.RegisterKind)(PeprStore, peprStoreGVK);

// src/lib/assets/store.ts
var { group, version, kind } = peprStoreGVK;
var singular = kind.toLocaleLowerCase();
var plural = `${singular}s`;
var name = `${plural}.${group}`;
var peprStoreCRD = {
  apiVersion: "apiextensions.k8s.io/v1",
  kind: "CustomResourceDefinition",
  metadata: {
    name
  },
  spec: {
    group,
    versions: [
      {
        // typescript doesn't know this is really already set, which is kind of annoying
        name: version || "v1",
        served: true,
        storage: true,
        schema: {
          openAPIV3Schema: {
            type: "object",
            properties: {
              data: {
                type: "object",
                additionalProperties: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    ],
    scope: "Namespaced",
    names: {
      plural,
      singular,
      kind
    }
  }
};

// src/runtime/controller.ts
var { version: version2 } = packageJSON;
function validateHash(expectedHash) {
  if (!expectedHash || expectedHash.length !== 64) {
    logger_default.error("Invalid hash");
    process.exit(1);
  }
}
function runModule(expectedHash) {
  const gzPath = `/app/load/module-${expectedHash}.js.gz`;
  const jsPath = `/app/module-${expectedHash}.js`;
  logger_default.level = "info";
  if (!import_fs.default.existsSync(gzPath)) {
    logger_default.error(`File not found: ${gzPath}`);
    process.exit(1);
  }
  try {
    logger_default.info(`Loading module ${gzPath}`);
    const codeGZ = import_fs.default.readFileSync(gzPath);
    const code = (0, import_zlib.gunzipSync)(codeGZ);
    const actualHash = import_crypto.default.createHash("sha256").update(code).digest("hex");
    if (expectedHash !== actualHash) {
      logger_default.error(`File hash does not match, expected ${expectedHash} but got ${actualHash}`);
      process.exit(1);
    }
    logger_default.info(`File hash matches, running module`);
    import_fs.default.writeFileSync(jsPath, code);
    (0, import_child_process.fork)(jsPath);
  } catch (e) {
    logger_default.error(`Failed to decompress module: ${e}`);
    process.exit(1);
  }
}
logger_default.info(`Pepr Controller (v${version2})`);
var hash = process.argv[2];
var startup = async () => {
  logger_default.info("Applying the Pepr Store CRD if it doesn't exist");
  await (0, import_kubernetes_fluent_client2.K8s)(import_kubernetes_fluent_client2.kind.CustomResourceDefinition).Apply(peprStoreCRD, { force: true });
  validateHash(hash);
  runModule(hash);
};
startup().catch((err) => logger_default.error(err));
