import { KubernetesObject } from "kubernetes-fluent-client";
import { Binding, CapabilityExport } from "./types";
type RBACMap = {
    [key: string]: {
        verbs: string[];
        plural: string;
    };
};
export declare function checkOverlap(bindingFilters: Record<string, string>, objectFilters: Record<string, string>): boolean;
/**
 * Decide to run callback after the event comes back from API Server
 **/
export declare function filterNoMatchReason(binding: Partial<Binding>, obj: Partial<KubernetesObject>, capabilityNamespaces: string[]): string;
export declare function addVerbIfNotExists(verbs: string[], verb: string): void;
export declare function createRBACMap(capabilities: CapabilityExport[]): RBACMap;
export declare function createDirectoryIfNotExists(path: string): Promise<void>;
export declare function hasEveryOverlap<T>(array1: T[], array2: T[]): boolean;
export declare function hasAnyOverlap<T>(array1: T[], array2: T[]): boolean;
export declare function ignoredNamespaceConflict(ignoreNamespaces: string[], bindingNamespaces: string[]): boolean;
export declare function bindingAndCapabilityNSConflict(bindingNamespaces: string[], capabilityNamespaces: string[]): boolean;
export declare function generateWatchNamespaceError(ignoredNamespaces: string[], bindingNamespaces: string[], capabilityNamespaces: string[]): string;
export declare function namespaceComplianceValidator(capability: CapabilityExport, ignoredNamespaces?: string[]): void;
export declare function checkDeploymentStatus(namespace: string): Promise<boolean>;
export declare function namespaceDeploymentsReady(namespace?: string): Promise<true | undefined>;
export declare function secretOverLimit(str: string): boolean;
export declare const parseTimeout: (value: string, previous: unknown) => number;
export declare function dedent(file: string): string;
export declare function replaceString(str: string, stringA: string, stringB: string): string;
export {};
//# sourceMappingURL=helpers.d.ts.map