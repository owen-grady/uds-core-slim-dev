import { Capability } from "./capability";
import { AdmissionRequest, MutateResponse, ValidateResponse, WebhookIgnore } from "./k8s";
/** Custom Labels Type for package.json */
export interface CustomLabels {
    namespace?: Record<string, string>;
}
/** Global configuration for the Pepr runtime. */
export type ModuleConfig = {
    /** The Pepr version this module uses */
    peprVersion?: string;
    /** The user-defined version of the module */
    appVersion?: string;
    /** A unique identifier for this Pepr module. This is automatically generated by Pepr. */
    uuid: string;
    /** A description of the Pepr module and what it does. */
    description?: string;
    /** The webhookTimeout */
    webhookTimeout?: number;
    /** Reject K8s resource AdmissionRequests on error. */
    onError?: string;
    /** Configure global exclusions that will never be processed by Pepr. */
    alwaysIgnore: WebhookIgnore;
    /** Define the log level for the in-cluster controllers */
    logLevel?: string;
    /** Propagate env variables to in-cluster controllers */
    env?: Record<string, string>;
    /** Custom Labels for Kubernetes Objects */
    customLabels?: CustomLabels;
};
export type PackageJSON = {
    description: string;
    pepr: ModuleConfig;
};
export type PeprModuleOptions = {
    deferStart?: boolean;
    /** A user-defined callback to pre-process or intercept a Pepr request from K8s immediately before it is processed */
    beforeHook?: (req: AdmissionRequest) => void;
    /** A user-defined callback to post-process or intercept a Pepr response just before it is returned to K8s */
    afterHook?: (res: MutateResponse | ValidateResponse) => void;
};
export declare const isWatchMode: () => boolean;
export declare const isBuildMode: () => boolean;
export declare const isDevMode: () => boolean;
export declare class PeprModule {
    #private;
    /**
     * Create a new Pepr runtime
     *
     * @param config The configuration for the Pepr runtime
     * @param capabilities The capabilities to be loaded into the Pepr runtime
     * @param opts Options for the Pepr runtime
     */
    constructor({ description, pepr }: PackageJSON, capabilities?: Capability[], opts?: PeprModuleOptions);
    /**
     * Start the Pepr runtime manually.
     * Normally this is called automatically when the Pepr module is instantiated, but can be called manually if `deferStart` is set to `true` in the constructor.
     *
     * @param port
     */
    start: (port?: number) => void;
}
//# sourceMappingURL=module.d.ts.map