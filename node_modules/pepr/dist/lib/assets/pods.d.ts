/// <reference types="node" />
import { V1EnvVar } from "@kubernetes/client-node";
import { kind } from "kubernetes-fluent-client";
import { Assets } from ".";
/** Generate the pepr-system namespace */
export declare function namespace(namespaceLabels?: Record<string, string>): {
    apiVersion: string;
    kind: string;
    metadata: {
        name: string;
        labels: Record<string, string>;
    };
} | {
    apiVersion: string;
    kind: string;
    metadata: {
        name: string;
        labels?: undefined;
    };
};
export declare function watcher(assets: Assets, hash: string, buildTimestamp: string): {
    apiVersion: string;
    kind: string;
    metadata: {
        name: string;
        namespace: string;
        annotations: {
            "pepr.dev/description": string;
        };
        labels: {
            app: string;
            "pepr.dev/controller": string;
            "pepr.dev/uuid": string;
        };
    };
    spec: {
        replicas: number;
        strategy: {
            type: string;
        };
        selector: {
            matchLabels: {
                app: string;
                "pepr.dev/controller": string;
            };
        };
        template: {
            metadata: {
                annotations: {
                    buildTimestamp: string;
                };
                labels: {
                    app: string;
                    "pepr.dev/controller": string;
                };
            };
            spec: {
                terminationGracePeriodSeconds: number;
                serviceAccountName: string;
                securityContext: {
                    runAsUser: number;
                    runAsGroup: number;
                    runAsNonRoot: boolean;
                    fsGroup: number;
                };
                containers: {
                    name: string;
                    image: string;
                    imagePullPolicy: string;
                    command: string[];
                    readinessProbe: {
                        httpGet: {
                            path: string;
                            port: number;
                            scheme: string;
                        };
                    };
                    livenessProbe: {
                        httpGet: {
                            path: string;
                            port: number;
                            scheme: string;
                        };
                    };
                    ports: {
                        containerPort: number;
                    }[];
                    resources: {
                        requests: {
                            memory: string;
                            cpu: string;
                        };
                        limits: {
                            memory: string;
                            cpu: string;
                        };
                    };
                    securityContext: {
                        runAsUser: number;
                        runAsGroup: number;
                        runAsNonRoot: boolean;
                        allowPrivilegeEscalation: boolean;
                        capabilities: {
                            drop: string[];
                        };
                    };
                    volumeMounts: {
                        name: string;
                        mountPath: string;
                        readOnly: boolean;
                    }[];
                    env: V1EnvVar[];
                }[];
                volumes: {
                    name: string;
                    secret: {
                        secretName: string;
                    };
                }[];
            };
        };
    };
} | null;
export declare function deployment(assets: Assets, hash: string, buildTimestamp: string): kind.Deployment;
export declare function moduleSecret(name: string, data: Buffer, hash: string): kind.Secret;
//# sourceMappingURL=pods.d.ts.map