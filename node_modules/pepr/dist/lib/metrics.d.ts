/**
 * MetricsCollector class handles metrics collection using prom-client and performance hooks.
 */
export declare class MetricsCollector {
    #private;
    /**
     * Creates a MetricsCollector instance with prefixed metrics.
     * @param [prefix='pepr'] - The prefix for the metric names.
     */
    constructor(prefix?: string);
    addCounter: (name: string, help: string) => void;
    addSummary: (name: string, help: string) => void;
    incCounter: (name: string) => void;
    /**
     * Increments the error counter.
     */
    error: () => void;
    /**
     * Increments the alerts counter.
     */
    alert: () => void;
    /**
     * Observes the duration since the provided start time and updates the summary.
     * @param startTime - The start time.
     * @param name - The metrics summary to increment.
     */
    observeEnd: (startTime: number, name?: string) => void;
    /**
     * Fetches the current metrics from the registry.
     * @returns The metrics.
     */
    getMetrics: () => Promise<string>;
    /**
     * Returns the current timestamp from performance.now() method. Useful for start timing an operation.
     * @returns The timestamp.
     */
    static observeStart(): number;
}
//# sourceMappingURL=metrics.d.ts.map