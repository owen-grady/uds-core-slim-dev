#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/cli/banner.ts
var banner = `\x1B[107;40m\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m/\x1B[38;5;m/\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m*\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;m,\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m/\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;234m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;234m \x1B[38;5;235m.\x1B[38;5;236m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;095m*\x1B[38;5;095m*\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;089m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;m.\x1B[38;5;234m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;089m*\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;233m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;235m.\x1B[38;5;089m*\x1B[38;5;m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;m,\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;236m.\x1B[38;5;m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m*\x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;089m*\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;236m.\x1B[38;5;131m*\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;237m,\x1B[38;5;233m \x1B[38;5;235m.\x1B[38;5;m,\x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;052m.\x1B[38;5;089m,\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;089m*\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;238m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;052m,\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;235m.\x1B[38;5;052m.\x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;089m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;089m*\x1B[38;5;125m*\x1B[38;5;131m/\x1B[38;5;095m*\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;m,\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;089m,\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m*\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;232m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;236m.\x1B[38;5;234m \x1B[38;5;234m.\x1B[38;5;095m*\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;089m*\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;237m,\x1B[38;5;131m*\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;125m*\x1B[38;5;052m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;247m(\x1B[38;5;251m%\x1B[38;5;232m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;089m,\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;236m.\x1B[38;5;236m.\x1B[38;5;236m.\x1B[38;5;089m*\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;240m*\x1B[38;5;241m*\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;245m(\x1B[38;5;007m%\x1B[38;5;016m \x1B[38;5;237m,\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;053m,\x1B[38;5;052m.\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;245m(\x1B[38;5;252m%\x1B[38;5;239m*\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;089m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;244m(\x1B[38;5;015m@\x1B[38;5;015m@\x1B[38;5;252m&\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;240m*\x1B[38;5;188m&\x1B[38;5;016m \x1B[38;5;236m.\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;238m,\x1B[38;5;235m.\x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;252m&\x1B[38;5;255m@\x1B[38;5;248m#\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;232m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;102m(\x1B[38;5;253m&\x1B[38;5;016m \x1B[38;5;238m,\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;236m,\x1B[38;5;236m.\x1B[38;5;235m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;248m#\x1B[38;5;253m&\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;234m \x1B[38;5;089m*\x1B[38;5;131m*\x1B[38;5;089m*\x1B[38;5;089m,\x1B[38;5;237m,\x1B[38;5;236m.\x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;233m \x1B[38;5;233m \x1B[38;5;241m*\x1B[38;5;244m/\x1B[38;5;241m*\x1B[38;5;235m.\x1B[38;5;236m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;237m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;095m*\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;125m*\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;131m/\x1B[38;5;095m*\x1B[38;5;236m,\x1B[38;5;236m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;089m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;089m*\x1B[38;5;237m,\x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;236m.\x1B[38;5;052m,\x1B[38;5;053m,\x1B[38;5;095m*\x1B[38;5;131m*\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;237m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m*\x1B[38;5;167m(\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;109m#\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;109m#\x1B[38;5;066m(\x1B[38;5;066m/\x1B[38;5;059m*\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;052m,\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;m,\x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;235m.\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;052m,\x1B[38;5;232m \x1B[38;5;235m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;234m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;232m \x1B[38;5;066m/\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;152m%\x1B[38;5;116m#\x1B[38;5;109m#\x1B[38;5;109m#\x1B[38;5;152m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;152m%\x1B[38;5;109m#\x1B[38;5;066m(\x1B[38;5;239m*\x1B[38;5;237m,\x1B[38;5;236m.\x1B[38;5;089m,\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;095m*\x1B[38;5;236m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;234m.\x1B[38;5;m,\x1B[38;5;m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;016m \x1B[38;5;089m*\x1B[38;5;167m/\x1B[38;5;232m \x1B[38;5;237m,\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;001m.\x1B[38;5;023m,\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;066m/\x1B[38;5;152m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;109m#\x1B[38;5;232m \x1B[38;5;233m \x1B[38;5;240m*\x1B[38;5;066m(\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;109m#\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;236m.\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;237m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;089m,\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;m*\x1B[38;5;089m,\x1B[38;5;236m,\x1B[38;5;m.\x1B[38;5;236m.\x1B[38;5;239m*\x1B[38;5;059m*\x1B[38;5;059m*\x1B[38;5;073m(\x1B[38;5;109m#\x1B[38;5;073m(\x1B[38;5;235m.\x1B[38;5;233m \x1B[38;5;232m \x1B[38;5;237m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;236m.\x1B[38;5;235m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;089m*\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;131m*\x1B[38;5;236m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;089m,\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;001m,\x1B[38;5;234m.\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;239m*\x1B[38;5;066m/\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;073m(\x1B[38;5;238m,\x1B[38;5;235m.\x1B[38;5;234m.\x1B[38;5;239m,\x1B[38;5;109m#\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;066m(\x1B[38;5;239m,\x1B[38;5;232m \x1B[38;5;m.\x1B[38;5;m,\x1B[38;5;m*\x1B[38;5;233m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;234m \x1B[38;5;m*\x1B[38;5;131m*\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;239m*\x1B[38;5;109m#\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;109m#\x1B[38;5;073m(\x1B[38;5;109m#\x1B[38;5;116m%\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;109m#\x1B[38;5;016m \x1B[38;5;235m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;089m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;095m*\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;233m \x1B[38;5;236m.\x1B[38;5;152m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;073m(\x1B[38;5;235m.\x1B[38;5;066m/\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;110m#\x1B[38;5;067m(\x1B[38;5;240m*\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;109m(\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;m#\x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;052m.\x1B[38;5;m*\x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;234m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;066m/\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;241m*\x1B[38;5;238m,\x1B[38;5;235m.\x1B[38;5;238m,\x1B[38;5;066m/\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;109m#\x1B[38;5;066m/\x1B[38;5;116m%\x1B[38;5;116m#\x1B[38;5;240m*\x1B[38;5;233m \x1B[38;5;235m.\x1B[38;5;237m,\x1B[38;5;238m,\x1B[38;5;095m*\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;235m.\x1B[38;5;233m \x1B[38;5;233m \x1B[38;5;052m.\x1B[38;5;053m,\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;237m,\x1B[38;5;234m.\x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;234m \x1B[38;5;234m.\x1B[38;5;052m.\x1B[38;5;053m,\x1B[38;5;053m,\x1B[38;5;089m,\x1B[38;5;m*\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;236m,\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;236m.\x1B[38;5;235m.\x1B[38;5;109m(\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;073m(\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;110m#\x1B[38;5;067m(\x1B[38;5;236m.\x1B[38;5;237m,\x1B[38;5;109m#\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;110m#\x1B[38;5;073m(\x1B[38;5;066m/\x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;240m*\x1B[38;5;239m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;237m,\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;060m*\x1B[38;5;073m(\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;066m(\x1B[38;5;016m \x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;116m%\x1B[38;5;109m#\x1B[38;5;016m \x1B[38;5;131m/\x1B[38;5;131m*\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;233m \x1B[38;5;052m.\x1B[38;5;052m.\x1B[38;5;232m \x1B[38;5;236m.\x1B[38;5;095m*\x1B[38;5;239m*\x1B[38;5;239m*\x1B[38;5;095m*\x1B[38;5;095m*\x1B[38;5;095m/\x1B[38;5;137m/\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;143m(\x1B[38;5;095m*\x1B[38;5;016m \x1B[38;5;131m*\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;089m,\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;237m,\x1B[38;5;m*\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;116m#\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;066m/\x1B[38;5;109m#\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m#\x1B[38;5;073m(\x1B[38;5;067m(\x1B[38;5;016m \x1B[38;5;237m,\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m%\x1B[38;5;m#\x1B[38;5;m/\x1B[38;5;m/\x1B[38;5;m/\x1B[38;5;m \x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;238m,\x1B[38;5;066m/\x1B[38;5;066m/\x1B[38;5;109m#\x1B[38;5;152m&\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;073m(\x1B[38;5;016m \x1B[38;5;066m/\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;066m/\x1B[38;5;153m&\x1B[38;5;116m%\x1B[38;5;235m.\x1B[38;5;001m,\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;234m \x1B[38;5;m/\x1B[38;5;222m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;179m#\x1B[38;5;016m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;234m.\x1B[38;5;232m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;089m,\x1B[38;5;236m.\x1B[38;5;236m.\x1B[38;5;m*\x1B[38;5;109m#\x1B[38;5;152m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;153m&\x1B[38;5;109m#\x1B[38;5;234m.\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;073m(\x1B[38;5;073m(\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;066m/\x1B[38;5;159m&\x1B[38;5;152m&\x1B[38;5;066m(\x1B[38;5;236m.\x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;110m#\x1B[38;5;159m&\x1B[38;5;240m*\x1B[38;5;016m \x1B[38;5;066m/\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;241m*\x1B[38;5;066m/\x1B[38;5;116m%\x1B[38;5;159m&\x1B[38;5;109m#\x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;234m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;016m \x1B[38;5;101m/\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;180m#\x1B[38;5;235m.\x1B[38;5;237m,\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m*\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;073m(\x1B[38;5;m%\x1B[38;5;m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;116m%\x1B[38;5;073m#\x1B[38;5;066m/\x1B[38;5;238m,\x1B[38;5;152m%\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;m&\x1B[38;5;m&\x1B[38;5;m&\x1B[38;5;m&\x1B[38;5;m#\x1B[38;5;m(\x1B[38;5;073m(\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;m/\x1B[38;5;066m/\x1B[38;5;066m/\x1B[38;5;240m*\x1B[38;5;240m*\x1B[38;5;242m/\x1B[38;5;067m(\x1B[38;5;109m#\x1B[38;5;116m%\x1B[38;5;116m%\x1B[38;5;016m \x1B[38;5;067m(\x1B[38;5;110m#\x1B[38;5;109m#\x1B[38;5;236m.\x1B[38;5;m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m*\x1B[38;5;016m \x1B[38;5;179m#\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;137m(\x1B[38;5;016m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;238m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;237m,\x1B[38;5;241m*\x1B[38;5;110m#\x1B[38;5;116m%\x1B[38;5;073m(\x1B[38;5;067m(\x1B[38;5;232m \x1B[38;5;066m(\x1B[38;5;066m/\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m*\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;m*\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;233m \x1B[38;5;m.\x1B[38;5;238m,\x1B[38;5;239m,\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;089m*\x1B[38;5;233m \x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;180m%\x1B[38;5;238m,\x1B[38;5;052m.\x1B[38;5;167m/\x1B[38;5;089m,\x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m*\x1B[38;5;232m \x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m.\x1B[38;5;016m \x1B[38;5;m*\x1B[38;5;m*\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;016m \x1B[38;5;m#\x1B[38;5;159m&\x1B[38;5;m%\x1B[38;5;m*\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;234m \x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;052m.\x1B[38;5;234m.\x1B[38;5;237m,\x1B[38;5;237m,\x1B[38;5;238m,\x1B[38;5;238m,\x1B[38;5;238m,\x1B[38;5;238m,\x1B[38;5;240m*\x1B[38;5;240m*\x1B[38;5;240m*\x1B[38;5;239m*\x1B[38;5;239m,\x1B[38;5;238m,\x1B[38;5;238m,\x1B[38;5;101m/\x1B[38;5;095m*\x1B[38;5;232m \x1B[38;5;235m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;016m \x1B[38;5;131m*\x1B[38;5;131m/\x1B[38;5;233m \x1B[38;5;232m \x1B[38;5;240m*\x1B[38;5;m*\x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m(\x1B[38;5;m&\x1B[38;5;159m&\x1B[38;5;m%\x1B[38;5;m(\x1B[38;5;m/\x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m,\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;131m*\x1B[38;5;089m*\x1B[38;5;053m,\x1B[38;5;233m \x1B[38;5;052m.\x1B[38;5;053m,\x1B[38;5;m \x1B[38;5;m#\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;143m(\x1B[38;5;236m.\x1B[38;5;232m \x1B[38;5;233m \x1B[38;5;233m \x1B[38;5;052m.\x1B[38;5;052m.\x1B[38;5;052m.\x1B[38;5;089m,\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;237m,\x1B[38;5;236m.\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;237m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m(\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;m%\x1B[38;5;m(\x1B[38;5;m/\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;016m \x1B[38;5;101m/\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;101m/\x1B[38;5;232m \x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;234m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;m \x1B[38;5;236m,\x1B[38;5;m/\x1B[38;5;m(\x1B[38;5;241m*\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m*\x1B[38;5;m \x1B[38;5;066m/\x1B[38;5;m&\x1B[38;5;m/\x1B[38;5;m&\x1B[38;5;159m&\x1B[38;5;m#\x1B[38;5;m(\x1B[38;5;m*\x1B[38;5;238m,\x1B[38;5;m/\x1B[38;5;m*\x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;233m \x1B[38;5;m,\x1B[38;5;089m,\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;m.\x1B[38;5;m,\x1B[38;5;m \x1B[38;5;249m%\x1B[38;5;255m@\x1B[38;5;m#\x1B[38;5;m \x1B[38;5;222m%\x1B[38;5;143m(\x1B[38;5;016m \x1B[38;5;243m/\x1B[38;5;254m@\x1B[38;5;243m/\x1B[38;5;016m \x1B[38;5;m,\x1B[38;5;m.\x1B[38;5;131m*\x1B[38;5;m.\x1B[38;5;233m \x1B[38;5;052m \x1B[38;5;052m,\x1B[38;5;125m*\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;237m,\x1B[38;5;016m \x1B[38;5;235m.\x1B[38;5;234m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m&\x1B[38;5;m&\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;073m(\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;159m&\x1B[38;5;110m#\x1B[38;5;m/\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m,\x1B[38;5;052m.\x1B[38;5;242m/\x1B[38;5;188m&\x1B[38;5;251m%\x1B[38;5;243m/\x1B[38;5;253m&\x1B[38;5;015m@\x1B[38;5;243m/\x1B[38;5;247m#\x1B[38;5;015m@\x1B[38;5;243m/\x1B[38;5;101m/\x1B[38;5;143m(\x1B[38;5;016m \x1B[38;5;231m@\x1B[38;5;251m%\x1B[38;5;234m \x1B[38;5;015m@\x1B[38;5;015m@\x1B[38;5;102m(\x1B[38;5;239m*\x1B[38;5;255m@\x1B[38;5;015m@\x1B[38;5;015m@\x1B[38;5;247m#\x1B[38;5;016m \x1B[38;5;237m,\x1B[38;5;235m.\x1B[38;5;234m \x1B[38;5;m.\x1B[38;5;m.\x1B[38;5;m,\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;237m,\x1B[38;5;089m*\x1B[38;5;131m*\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;095m*\x1B[38;5;234m.\x1B[38;5;m.\x1B[38;5;m#\x1B[38;5;116m%\x1B[38;5;073m(\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;233m \x1B[38;5;m%\x1B[38;5;m%\x1B[38;5;m.\x1B[38;5;236m.\x1B[38;5;237m,\x1B[38;5;236m.\x1B[38;5;235m.\x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m*\x1B[38;5;131m/\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;246m(\x1B[38;5;015m@\x1B[38;5;253m&\x1B[38;5;016m \x1B[38;5;242m/\x1B[38;5;240m*\x1B[38;5;m \x1B[38;5;016m \x1B[38;5;137m(\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;101m/\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;241m/\x1B[38;5;244m(\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;252m&\x1B[38;5;015m@\x1B[38;5;245m(\x1B[38;5;016m \x1B[38;5;m(\x1B[38;5;179m#\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;143m#\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;089m*\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;235m.\x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;m*\x1B[38;5;m \x1B[38;5;233m \x1B[38;5;052m.\x1B[38;5;053m,\x1B[38;5;233m \x1B[38;5;m.\x1B[38;5;239m*\x1B[38;5;240m*\x1B[38;5;240m*\x1B[38;5;240m*\x1B[38;5;101m/\x1B[38;5;137m(\x1B[38;5;143m(\x1B[38;5;179m#\x1B[38;5;179m#\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;179m#\x1B[38;5;240m*\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;238m,\x1B[38;5;240m*\x1B[38;5;240m*\x1B[38;5;239m,\x1B[38;5;238m,\x1B[38;5;235m.\x1B[38;5;016m \x1B[38;5;237m,\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m#\x1B[38;5;m%\x1B[38;5;240m*\x1B[38;5;m \x1B[38;5;m/\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;238m,\x1B[38;5;m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;233m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;179m#\x1B[38;5;137m(\x1B[38;5;236m.\x1B[38;5;016m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;016m \x1B[38;5;053m,\x1B[38;5;238m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;238m,\x1B[38;5;m#\x1B[38;5;066m/\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;066m/\x1B[38;5;m%\x1B[38;5;240m*\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m*\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;m(\x1B[38;5;053m,\x1B[38;5;m \x1B[38;5;m*\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;234m.\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;052m.\x1B[38;5;234m.\x1B[38;5;179m#\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;180m%\x1B[38;5;179m#\x1B[38;5;137m(\x1B[38;5;237m,\x1B[38;5;232m \x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;234m \x1B[38;5;052m.\x1B[38;5;089m,\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;089m*\x1B[38;5;m,\x1B[38;5;236m.\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;234m.\x1B[38;5;066m/\x1B[38;5;240m*\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;235m.\x1B[38;5;235m.\x1B[38;5;m,\x1B[38;5;m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;m/\x1B[38;5;237m,\x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;016m \x1B[38;5;095m/\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;186m%\x1B[38;5;222m%\x1B[38;5;179m#\x1B[38;5;137m(\x1B[38;5;101m/\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;016m \x1B[38;5;052m.\x1B[38;5;089m,\x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;238m,\x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;232m \x1B[38;5;m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;125m*\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;233m \x1B[38;5;235m.\x1B[38;5;239m*\x1B[38;5;101m/\x1B[38;5;137m(\x1B[38;5;143m(\x1B[38;5;179m#\x1B[38;5;180m#\x1B[38;5;180m%\x1B[38;5;186m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m#\x1B[38;5;180m#\x1B[38;5;179m#\x1B[38;5;143m#\x1B[38;5;143m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;238m,\x1B[38;5;236m,\x1B[38;5;234m.\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;237m,\x1B[38;5;232m \x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;m*\x1B[38;5;233m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;125m*\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;237m,\x1B[38;5;016m \x1B[38;5;095m*\x1B[38;5;180m%\x1B[38;5;180m#\x1B[38;5;143m#\x1B[38;5;143m(\x1B[38;5;143m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;143m(\x1B[38;5;143m#\x1B[38;5;179m#\x1B[38;5;179m#\x1B[38;5;180m%\x1B[38;5;222m%\x1B[38;5;222m%\x1B[38;5;179m#\x1B[38;5;137m(\x1B[38;5;143m(\x1B[38;5;240m*\x1B[38;5;m \x1B[38;5;m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;016m \x1B[38;5;232m \x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;131m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;m/\x1B[38;5;m,\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;131m*\x1B[38;5;131m/\x1B[38;5;131m*\x1B[38;5;131m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;089m*\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;236m,\x1B[38;5;233m \x1B[38;5;235m.\x1B[38;5;095m/\x1B[38;5;143m(\x1B[38;5;179m#\x1B[38;5;180m#\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;186m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;180m%\x1B[38;5;179m#\x1B[38;5;179m#\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;101m/\x1B[38;5;232m \x1B[38;5;052m.\x1B[38;5;131m*\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;131m/\x1B[38;5;238m,\x1B[38;5;234m.\x1B[38;5;232m \x1B[38;5;233m \x1B[38;5;235m.\x1B[38;5;053m,\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;089m,\x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;125m*\x1B[38;5;125m*\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;131m*\x1B[38;5;089m*\x1B[38;5;089m,\x1B[38;5;236m.\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;016m \x1B[38;5;102m(\x1B[38;5;m@\x1B[38;5;243m/\x1B[38;5;237m,\x1B[38;5;253m&\x1B[38;5;251m%\x1B[38;5;016m \x1B[38;5;059m*\x1B[38;5;255m@\x1B[38;5;250m%\x1B[38;5;016m \x1B[38;5;236m.\x1B[38;5;240m*\x1B[38;5;016m \x1B[38;5;131m*\x1B[38;5;167m(\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m/\x1B[38;5;167m(\x1B[38;5;131m/\x1B[38;5;089m,\x1B[38;5;089m,\x1B[38;5;233m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;235m.\x1B[38;5;m*\x1B[38;5;m/\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;143m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;137m(\x1B[38;5;137m/\x1B[38;5;236m.\x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;089m*\x1B[38;5;089m*\x1B[38;5;016m \x1B[38;5;052m.\x1B[38;5;131m/\x1B[38;5;052m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;131m/\x1B[38;5;131m/\x1B[38;5;237m,\x1B[38;5;m \x1B[38;5;235m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m*\x1B[38;5;m \x1B[38;5;m/\x1B[38;5;m@\x1B[38;5;244m/\x1B[38;5;241m/\x1B[38;5;015m@\x1B[38;5;015m@\x1B[38;5;237m,\x1B[38;5;248m#\x1B[38;5;015m@\x1B[38;5;254m@\x1B[38;5;016m \x1B[38;5;251m%\x1B[38;5;015m@\x1B[38;5;015m@\x1B[38;5;246m(\x1B[38;5;016m \x1B[38;5;131m*\x1B[38;5;167m/\x1B[38;5;m/\x1B[38;5;131m/\x1B[38;5;131m*\x1B[38;5;m,\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m,\x1B[38;5;m,\x1B[38;5;m,\x1B[38;5;m,\x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m(\x1B[38;5;015m@\x1B[38;5;250m%\x1B[38;5;238m,\x1B[38;5;254m&\x1B[38;5;015m@\x1B[38;5;247m#\x1B[38;5;239m*\x1B[38;5;255m@\x1B[38;5;015m@\x1B[38;5;255m@\x1B[38;5;242m/\x1B[38;5;235m.\x1B[38;5;252m&\x1B[38;5;015m@\x1B[38;5;m%\x1B[38;5;016m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m,\x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;016m \x1B[38;5;233m \x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;235m.\x1B[38;5;m%\x1B[38;5;m&\x1B[38;5;m*\x1B[38;5;m%\x1B[38;5;m@\x1B[38;5;252m&\x1B[38;5;016m \x1B[38;5;253m&\x1B[38;5;015m@\x1B[38;5;015m@\x1B[38;5;188m&\x1B[38;5;m \x1B[38;5;m#\x1B[38;5;m@\x1B[38;5;m%\x1B[38;5;244m(\x1B[38;5;016m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m.\x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m \x1B[38;5;m
  \x1B[0m
`;

// src/cli/build.ts
var import_child_process2 = require("child_process");
var import_esbuild = require("esbuild");
var import_fs8 = require("fs");
var import_path2 = require("path");

// src/lib/included-files.ts
var import_fs = require("fs");
async function createDockerfile(version3, description, includedFiles) {
  const file = `
    # Use an official Node.js runtime as the base image
    FROM ghcr.io/defenseunicorns/pepr/controller:v${version3}
  
    LABEL description="${description}"
    
    # Add the included files to the image
    ${includedFiles.map((f) => `ADD ${f} ${f}`).join("\n")}
  
    `;
  await import_fs.promises.writeFile("Dockerfile.controller", file, { encoding: "utf-8" });
}

// src/lib/assets/index.ts
var import_crypto3 = __toESM(require("crypto"));
var import_client_node2 = require("@kubernetes/client-node");

// src/lib/tls.ts
var import_node_forge = __toESM(require("node-forge"));
var caName = "Pepr Ephemeral CA";
function genTLS(name2) {
  const caKeys = import_node_forge.default.pki.rsa.generateKeyPair(2048);
  const caCert = genCert(caKeys, caName, [{ name: "commonName", value: caName }]);
  caCert.setExtensions([
    {
      name: "basicConstraints",
      cA: true
    },
    {
      name: "keyUsage",
      keyCertSign: true,
      digitalSignature: true,
      nonRepudiation: true,
      keyEncipherment: true,
      dataEncipherment: true
    }
  ]);
  const serverKeys = import_node_forge.default.pki.rsa.generateKeyPair(2048);
  const serverCert = genCert(serverKeys, name2, caCert.subject.attributes);
  caCert.sign(caKeys.privateKey, import_node_forge.default.md.sha256.create());
  serverCert.sign(caKeys.privateKey, import_node_forge.default.md.sha256.create());
  const pem = {
    ca: import_node_forge.default.pki.certificateToPem(caCert),
    crt: import_node_forge.default.pki.certificateToPem(serverCert),
    key: import_node_forge.default.pki.privateKeyToPem(serverKeys.privateKey)
  };
  const ca = Buffer.from(pem.ca).toString("base64");
  const key = Buffer.from(pem.key).toString("base64");
  const crt = Buffer.from(pem.crt).toString("base64");
  return { ca, key, crt, pem };
}
function genCert(key, name2, issuer) {
  const crt = import_node_forge.default.pki.createCertificate();
  crt.publicKey = key.publicKey;
  crt.serialNumber = "01";
  crt.validity.notBefore = /* @__PURE__ */ new Date();
  crt.validity.notAfter = /* @__PURE__ */ new Date();
  crt.validity.notAfter.setFullYear(crt.validity.notBefore.getFullYear() + 1);
  crt.setExtensions([
    {
      name: "subjectAltName",
      altNames: [
        {
          type: 2,
          // DNS
          value: name2
        }
      ]
    }
  ]);
  crt.setIssuer(issuer);
  return crt;
}

// src/lib/assets/deploy.ts
var import_crypto = __toESM(require("crypto"));
var import_fs3 = require("fs");
var import_kubernetes_fluent_client3 = require("kubernetes-fluent-client");

// src/lib/logger.ts
var import_pino = require("pino");
var isPrettyLog = true;
var pretty = {
  target: "pino-pretty",
  options: {
    colorize: true
  }
};
var transport = isPrettyLog ? pretty : void 0;
var Log = (0, import_pino.pino)({
  transport
});
if (process.env.LOG_LEVEL) {
  Log.level = process.env.LOG_LEVEL;
}
var logger_default = Log;

// src/lib/assets/networking.ts
function apiTokenSecret(name2, apiToken) {
  return {
    apiVersion: "v1",
    kind: "Secret",
    metadata: {
      name: `${name2}-api-token`,
      namespace: "pepr-system"
    },
    type: "Opaque",
    data: {
      value: Buffer.from(apiToken).toString("base64")
    }
  };
}
function tlsSecret(name2, tls) {
  return {
    apiVersion: "v1",
    kind: "Secret",
    metadata: {
      name: `${name2}-tls`,
      namespace: "pepr-system"
    },
    type: "kubernetes.io/tls",
    data: {
      "tls.crt": tls.crt,
      "tls.key": tls.key
    }
  };
}
function service(name2) {
  return {
    apiVersion: "v1",
    kind: "Service",
    metadata: {
      name: name2,
      namespace: "pepr-system",
      labels: {
        "pepr.dev/controller": "admission"
      }
    },
    spec: {
      selector: {
        app: name2,
        "pepr.dev/controller": "admission"
      },
      ports: [
        {
          port: 443,
          targetPort: 3e3
        }
      ]
    }
  };
}
function watcherService(name2) {
  return {
    apiVersion: "v1",
    kind: "Service",
    metadata: {
      name: `${name2}-watcher`,
      namespace: "pepr-system",
      labels: {
        "pepr.dev/controller": "watcher"
      }
    },
    spec: {
      selector: {
        app: `${name2}-watcher`,
        "pepr.dev/controller": "watcher"
      },
      ports: [
        {
          port: 443,
          targetPort: 3e3
        }
      ]
    }
  };
}

// src/lib/assets/pods.ts
var import_zlib = require("zlib");

// src/lib/helpers.ts
var import_fs2 = require("fs");
var import_kubernetes_fluent_client = require("kubernetes-fluent-client");
function createRBACMap(capabilities) {
  return capabilities.reduce((acc, capability) => {
    capability.bindings.forEach((binding) => {
      const key = `${binding.kind.group}/${binding.kind.version}/${binding.kind.kind}`;
      acc["pepr.dev/v1/peprstore"] = {
        verbs: ["create", "get", "patch", "watch"],
        plural: "peprstores"
      };
      acc["apiextensions.k8s.io/v1/customresourcedefinition"] = {
        verbs: ["patch", "create"],
        plural: "customresourcedefinitions"
      };
      if (!acc[key] && binding.isWatch) {
        acc[key] = {
          verbs: ["watch"],
          plural: binding.kind.plural || `${binding.kind.kind.toLowerCase()}s`
        };
      }
    });
    return acc;
  }, {});
}
async function createDirectoryIfNotExists(path) {
  try {
    await import_fs2.promises.access(path);
  } catch (error) {
    if (error.code === "ENOENT") {
      await import_fs2.promises.mkdir(path, { recursive: true });
    } else {
      throw error;
    }
  }
}
function hasEveryOverlap(array1, array2) {
  if (!Array.isArray(array1) || !Array.isArray(array2)) {
    return false;
  }
  return array1.every((element) => array2.includes(element));
}
function hasAnyOverlap(array1, array2) {
  if (!Array.isArray(array1) || !Array.isArray(array2)) {
    return false;
  }
  return array1.some((element) => array2.includes(element));
}
function ignoredNamespaceConflict(ignoreNamespaces, bindingNamespaces) {
  return hasAnyOverlap(bindingNamespaces, ignoreNamespaces);
}
function bindingAndCapabilityNSConflict(bindingNamespaces, capabilityNamespaces) {
  if (!capabilityNamespaces) {
    return false;
  }
  return capabilityNamespaces.length !== 0 && !hasEveryOverlap(bindingNamespaces, capabilityNamespaces);
}
function generateWatchNamespaceError(ignoredNamespaces, bindingNamespaces, capabilityNamespaces) {
  let err = "";
  if (ignoredNamespaceConflict(ignoredNamespaces, bindingNamespaces)) {
    err += `Binding uses a Pepr ignored namespace: ignoredNamespaces: [${ignoredNamespaces.join(
      ", "
    )}] bindingNamespaces: [${bindingNamespaces.join(", ")}].`;
  }
  if (bindingAndCapabilityNSConflict(bindingNamespaces, capabilityNamespaces)) {
    err += `Binding uses namespace not governed by capability: bindingNamespaces: [${bindingNamespaces.join(
      ", "
    )}] capabilityNamespaces: [${capabilityNamespaces.join(", ")}].`;
  }
  return err.replace(/\.([^ ])/g, ". $1");
}
function namespaceComplianceValidator(capability, ignoredNamespaces) {
  const { namespaces: capabilityNamespaces, bindings, name: name2 } = capability;
  const bindingNamespaces = bindings.flatMap((binding) => binding.filters.namespaces);
  const namespaceError = generateWatchNamespaceError(
    ignoredNamespaces ? ignoredNamespaces : [],
    bindingNamespaces,
    capabilityNamespaces ? capabilityNamespaces : []
  );
  if (namespaceError !== "") {
    throw new Error(
      `Error in ${name2} capability. A binding violates namespace rules. Please check ignoredNamespaces and capability namespaces: ${namespaceError}`
    );
  }
}
async function checkDeploymentStatus(namespace2) {
  const deployments = await (0, import_kubernetes_fluent_client.K8s)(import_kubernetes_fluent_client.kind.Deployment).InNamespace(namespace2).Get();
  let status = false;
  let readyCount = 0;
  for (const deployment2 of deployments.items) {
    const readyReplicas = deployment2.status?.readyReplicas ? deployment2.status?.readyReplicas : 0;
    if (deployment2.status?.readyReplicas !== deployment2.spec?.replicas) {
      logger_default.info(
        `Waiting for deployment ${deployment2.metadata?.name} rollout to finish: ${readyReplicas} of ${deployment2.spec?.replicas} replicas are available`
      );
    } else {
      logger_default.info(
        `Deployment ${deployment2.metadata?.name} rolled out: ${readyReplicas} of ${deployment2.spec?.replicas} replicas are available`
      );
      readyCount++;
    }
  }
  if (readyCount === deployments.items.length) {
    status = true;
  }
  return status;
}
async function namespaceDeploymentsReady(namespace2 = "pepr-system") {
  logger_default.info(`Checking ${namespace2} deployments status...`);
  let ready = false;
  while (!ready) {
    ready = await checkDeploymentStatus(namespace2);
    if (ready) {
      return ready;
    }
    await new Promise((resolve5) => setTimeout(resolve5, 1e3));
  }
  logger_default.info(`All ${namespace2} deployments are ready`);
}
function secretOverLimit(str) {
  const encoder = new TextEncoder();
  const encoded = encoder.encode(str);
  const sizeInBytes = encoded.length;
  const oneMiBInBytes = 1048576;
  return sizeInBytes > oneMiBInBytes;
}
var parseTimeout = (value, previous) => {
  const parsedValue = parseInt(value, 10);
  const floatValue = parseFloat(value);
  if (isNaN(parsedValue)) {
    throw new Error("Not a number.");
  } else if (parsedValue !== floatValue) {
    throw new Error("Value must be an integer.");
  } else if (parsedValue < 1 || parsedValue > 30) {
    throw new Error("Number must be between 1 and 30.");
  }
  return parsedValue;
};
function dedent(file) {
  const lines = file.split("\n");
  if (lines[0].trim() === "") {
    lines.shift();
    file = lines.join("\n");
  }
  const match = file.match(/^[ \t]*(?=\S)/gm);
  const indent = match && Math.min(...match.map((el) => el.length));
  if (indent && indent > 0) {
    const re = new RegExp(`^[ \\t]{${indent}}`, "gm");
    return file.replace(re, "");
  }
  return file;
}
function replaceString(str, stringA, stringB) {
  const escapedStringA = stringA.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
  const regExp = new RegExp(escapedStringA, "g");
  return str.replace(regExp, stringB);
}

// src/lib/assets/pods.ts
function namespace(namespaceLabels) {
  if (namespaceLabels) {
    return {
      apiVersion: "v1",
      kind: "Namespace",
      metadata: {
        name: "pepr-system",
        labels: namespaceLabels ?? {}
      }
    };
  } else {
    return {
      apiVersion: "v1",
      kind: "Namespace",
      metadata: {
        name: "pepr-system"
      }
    };
  }
}
function watcher(assets, hash, buildTimestamp) {
  const { name: name2, image, capabilities, config } = assets;
  let hasSchedule = false;
  const app = `${name2}-watcher`;
  const bindings = [];
  for (const capability of capabilities) {
    if (capability.hasSchedule) {
      hasSchedule = true;
    }
    const watchers = capability.bindings.filter((binding) => binding.isWatch);
    bindings.push(...watchers);
  }
  if (bindings.length < 1 && !hasSchedule) {
    return null;
  }
  return {
    apiVersion: "apps/v1",
    kind: "Deployment",
    metadata: {
      name: app,
      namespace: "pepr-system",
      annotations: {
        "pepr.dev/description": config.description || ""
      },
      labels: {
        app,
        "pepr.dev/controller": "watcher",
        "pepr.dev/uuid": config.uuid
      }
    },
    spec: {
      replicas: 1,
      strategy: {
        type: "Recreate"
      },
      selector: {
        matchLabels: {
          app,
          "pepr.dev/controller": "watcher"
        }
      },
      template: {
        metadata: {
          annotations: {
            buildTimestamp: `${buildTimestamp}`
          },
          labels: {
            app,
            "pepr.dev/controller": "watcher"
          }
        },
        spec: {
          terminationGracePeriodSeconds: 5,
          serviceAccountName: name2,
          securityContext: {
            runAsUser: 65532,
            runAsGroup: 65532,
            runAsNonRoot: true,
            fsGroup: 65532
          },
          containers: [
            {
              name: "watcher",
              image,
              imagePullPolicy: "IfNotPresent",
              command: ["node", "/app/node_modules/pepr/dist/controller.js", hash],
              readinessProbe: {
                httpGet: {
                  path: "/healthz",
                  port: 3e3,
                  scheme: "HTTPS"
                }
              },
              livenessProbe: {
                httpGet: {
                  path: "/healthz",
                  port: 3e3,
                  scheme: "HTTPS"
                }
              },
              ports: [
                {
                  containerPort: 3e3
                }
              ],
              resources: {
                requests: {
                  memory: "64Mi",
                  cpu: "100m"
                },
                limits: {
                  memory: "256Mi",
                  cpu: "500m"
                }
              },
              securityContext: {
                runAsUser: 65532,
                runAsGroup: 65532,
                runAsNonRoot: true,
                allowPrivilegeEscalation: false,
                capabilities: {
                  drop: ["ALL"]
                }
              },
              volumeMounts: [
                {
                  name: "tls-certs",
                  mountPath: "/etc/certs",
                  readOnly: true
                },
                {
                  name: "module",
                  mountPath: `/app/load`,
                  readOnly: true
                }
              ],
              env: genEnv(config, true)
            }
          ],
          volumes: [
            {
              name: "tls-certs",
              secret: {
                secretName: `${name2}-tls`
              }
            },
            {
              name: "module",
              secret: {
                secretName: `${name2}-module`
              }
            }
          ]
        }
      }
    }
  };
}
function deployment(assets, hash, buildTimestamp) {
  const { name: name2, image, config } = assets;
  const app = name2;
  return {
    apiVersion: "apps/v1",
    kind: "Deployment",
    metadata: {
      name: name2,
      namespace: "pepr-system",
      annotations: {
        "pepr.dev/description": config.description || ""
      },
      labels: {
        app,
        "pepr.dev/controller": "admission",
        "pepr.dev/uuid": config.uuid
      }
    },
    spec: {
      replicas: 2,
      selector: {
        matchLabels: {
          app,
          "pepr.dev/controller": "admission"
        }
      },
      template: {
        metadata: {
          annotations: {
            buildTimestamp: `${buildTimestamp}`
          },
          labels: {
            app,
            "pepr.dev/controller": "admission"
          }
        },
        spec: {
          terminationGracePeriodSeconds: 5,
          priorityClassName: "system-node-critical",
          serviceAccountName: name2,
          securityContext: {
            runAsUser: 65532,
            runAsGroup: 65532,
            runAsNonRoot: true,
            fsGroup: 65532
          },
          containers: [
            {
              name: "server",
              image,
              imagePullPolicy: "IfNotPresent",
              command: ["node", "/app/node_modules/pepr/dist/controller.js", hash],
              readinessProbe: {
                httpGet: {
                  path: "/healthz",
                  port: 3e3,
                  scheme: "HTTPS"
                }
              },
              livenessProbe: {
                httpGet: {
                  path: "/healthz",
                  port: 3e3,
                  scheme: "HTTPS"
                }
              },
              ports: [
                {
                  containerPort: 3e3
                }
              ],
              resources: {
                requests: {
                  memory: "64Mi",
                  cpu: "100m"
                },
                limits: {
                  memory: "256Mi",
                  cpu: "500m"
                }
              },
              env: genEnv(config),
              securityContext: {
                runAsUser: 65532,
                runAsGroup: 65532,
                runAsNonRoot: true,
                allowPrivilegeEscalation: false,
                capabilities: {
                  drop: ["ALL"]
                }
              },
              volumeMounts: [
                {
                  name: "tls-certs",
                  mountPath: "/etc/certs",
                  readOnly: true
                },
                {
                  name: "api-token",
                  mountPath: "/app/api-token",
                  readOnly: true
                },
                {
                  name: "module",
                  mountPath: `/app/load`,
                  readOnly: true
                }
              ]
            }
          ],
          volumes: [
            {
              name: "tls-certs",
              secret: {
                secretName: `${name2}-tls`
              }
            },
            {
              name: "api-token",
              secret: {
                secretName: `${name2}-api-token`
              }
            },
            {
              name: "module",
              secret: {
                secretName: `${name2}-module`
              }
            }
          ]
        }
      }
    }
  };
}
function moduleSecret(name2, data, hash) {
  const compressed = (0, import_zlib.gzipSync)(data);
  const path = `module-${hash}.js.gz`;
  const compressedData = compressed.toString("base64");
  if (secretOverLimit(compressedData)) {
    const error = new Error(`Module secret for ${name2} is over the 1MB limit`);
    console.error("Uncaught Exception:", error);
    process.exit(1);
  } else {
    return {
      apiVersion: "v1",
      kind: "Secret",
      metadata: {
        name: `${name2}-module`,
        namespace: "pepr-system"
      },
      type: "Opaque",
      data: {
        [path]: compressed.toString("base64")
      }
    };
  }
}
function genEnv(config, watchMode = false) {
  const def = {
    PEPR_WATCH_MODE: watchMode ? "true" : "false",
    PEPR_PRETTY_LOG: "false",
    LOG_LEVEL: config.logLevel || "info"
  };
  const cfg = config.env || {};
  const env = Object.entries({ ...def, ...cfg }).map(([name2, value]) => ({ name: name2, value }));
  return env;
}

// src/lib/assets/rbac.ts
function clusterRole(name2, capabilities, rbacMode = "") {
  const rbacMap = createRBACMap(capabilities);
  return {
    apiVersion: "rbac.authorization.k8s.io/v1",
    kind: "ClusterRole",
    metadata: { name: name2 },
    rules: rbacMode === "scoped" ? [
      ...Object.keys(rbacMap).map((key) => {
        let group2;
        key.split("/").length < 3 ? group2 = "" : group2 = key.split("/")[0];
        return {
          apiGroups: [group2],
          resources: [rbacMap[key].plural],
          verbs: rbacMap[key].verbs
        };
      })
    ] : [
      {
        apiGroups: ["*"],
        resources: ["*"],
        verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
      }
    ]
  };
}
function clusterRoleBinding(name2) {
  return {
    apiVersion: "rbac.authorization.k8s.io/v1",
    kind: "ClusterRoleBinding",
    metadata: { name: name2 },
    roleRef: {
      apiGroup: "rbac.authorization.k8s.io",
      kind: "ClusterRole",
      name: name2
    },
    subjects: [
      {
        kind: "ServiceAccount",
        name: name2,
        namespace: "pepr-system"
      }
    ]
  };
}
function serviceAccount(name2) {
  return {
    apiVersion: "v1",
    kind: "ServiceAccount",
    metadata: {
      name: name2,
      namespace: "pepr-system"
    }
  };
}
function storeRole(name2) {
  name2 = `${name2}-store`;
  return {
    apiVersion: "rbac.authorization.k8s.io/v1",
    kind: "Role",
    metadata: { name: name2, namespace: "pepr-system" },
    rules: [
      {
        apiGroups: ["pepr.dev"],
        resources: ["peprstores"],
        resourceNames: [""],
        verbs: ["create", "get", "patch", "watch"]
      }
    ]
  };
}
function storeRoleBinding(name2) {
  name2 = `${name2}-store`;
  return {
    apiVersion: "rbac.authorization.k8s.io/v1",
    kind: "RoleBinding",
    metadata: { name: name2, namespace: "pepr-system" },
    roleRef: {
      apiGroup: "rbac.authorization.k8s.io",
      kind: "Role",
      name: name2
    },
    subjects: [
      {
        kind: "ServiceAccount",
        name: name2,
        namespace: "pepr-system"
      }
    ]
  };
}

// src/lib/k8s.ts
var import_kubernetes_fluent_client2 = require("kubernetes-fluent-client");
var PeprStore = class extends import_kubernetes_fluent_client2.GenericKind {
};
var peprStoreGVK = {
  kind: "PeprStore",
  version: "v1",
  group: "pepr.dev"
};
(0, import_kubernetes_fluent_client2.RegisterKind)(PeprStore, peprStoreGVK);

// src/lib/assets/store.ts
var { group, version, kind: kind2 } = peprStoreGVK;
var singular = kind2.toLocaleLowerCase();
var plural = `${singular}s`;
var name = `${plural}.${group}`;
var peprStoreCRD = {
  apiVersion: "apiextensions.k8s.io/v1",
  kind: "CustomResourceDefinition",
  metadata: {
    name
  },
  spec: {
    group,
    versions: [
      {
        // typescript doesn't know this is really already set, which is kind of annoying
        name: version || "v1",
        served: true,
        storage: true,
        schema: {
          openAPIV3Schema: {
            type: "object",
            properties: {
              data: {
                type: "object",
                additionalProperties: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    ],
    scope: "Namespaced",
    names: {
      plural,
      singular,
      kind: kind2
    }
  }
};

// src/lib/assets/webhooks.ts
var import_ramda = require("ramda");
var peprIgnoreLabel = {
  key: "pepr.dev",
  operator: "NotIn",
  values: ["ignore"]
};
var peprIgnoreNamespaces = ["kube-system", "pepr-system"];
async function generateWebhookRules(assets, isMutateWebhook) {
  const { config, capabilities } = assets;
  const rules = [];
  for (const capability of capabilities) {
    console.info(`Module ${config.uuid} has capability: ${capability.name}`);
    for (const binding of capability.bindings) {
      const { event, kind: kind6, isMutate, isValidate } = binding;
      if (isMutateWebhook && !isMutate) {
        continue;
      }
      if (!isMutateWebhook && !isValidate) {
        continue;
      }
      const operations = [];
      if (event === "CREATEORUPDATE" /* CreateOrUpdate */) {
        operations.push("CREATE" /* Create */, "UPDATE" /* Update */);
      } else {
        operations.push(event);
      }
      const resource = kind6.plural || `${kind6.kind.toLowerCase()}s`;
      const ruleObject = {
        apiGroups: [kind6.group],
        apiVersions: [kind6.version || "*"],
        operations,
        resources: [resource]
      };
      if (resource === "pods") {
        ruleObject.resources.push("pods/ephemeralcontainers");
      }
      rules.push(ruleObject);
    }
  }
  return (0, import_ramda.uniqWith)(import_ramda.equals, rules);
}
async function webhookConfig(assets, mutateOrValidate, timeoutSeconds = 10) {
  const ignore = [peprIgnoreLabel];
  const { name: name2, tls, config, apiToken, host } = assets;
  const ignoreNS = (0, import_ramda.concat)(peprIgnoreNamespaces, config.alwaysIgnore.namespaces || []);
  if (ignoreNS) {
    ignore.push({
      key: "kubernetes.io/metadata.name",
      operator: "NotIn",
      values: ignoreNS
    });
  }
  const clientConfig = {
    caBundle: tls.ca
  };
  const apiPath = `/${mutateOrValidate}/${apiToken}`;
  if (host) {
    clientConfig.url = `https://${host}:3000${apiPath}`;
  } else {
    clientConfig.service = {
      name: name2,
      namespace: "pepr-system",
      path: apiPath
    };
  }
  const isMutate = mutateOrValidate === "mutate";
  const rules = await generateWebhookRules(assets, isMutate);
  if (rules.length < 1) {
    return null;
  }
  return {
    apiVersion: "admissionregistration.k8s.io/v1",
    kind: isMutate ? "MutatingWebhookConfiguration" : "ValidatingWebhookConfiguration",
    metadata: { name: name2 },
    webhooks: [
      {
        name: `${name2}.pepr.dev`,
        admissionReviewVersions: ["v1", "v1beta1"],
        clientConfig,
        failurePolicy: config.onError === "reject" ? "Fail" : "Ignore",
        matchPolicy: "Equivalent",
        timeoutSeconds,
        namespaceSelector: {
          matchExpressions: ignore
        },
        objectSelector: {
          matchExpressions: ignore
        },
        rules,
        // @todo: track side effects state
        sideEffects: "None"
      }
    ]
  };
}

// src/lib/assets/deploy.ts
async function deploy(assets, force, webhookTimeout) {
  logger_default.info("Establishing connection to Kubernetes");
  const { name: name2, host, path } = assets;
  logger_default.info("Applying pepr-system namespace");
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Namespace).Apply(namespace(assets.config.customLabels?.namespace));
  const mutateWebhook = await webhookConfig(assets, "mutate", webhookTimeout);
  if (mutateWebhook) {
    logger_default.info("Applying mutating webhook");
    await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.MutatingWebhookConfiguration).Apply(mutateWebhook, { force });
  } else {
    logger_default.info("Mutating webhook not needed, removing if it exists");
    await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.MutatingWebhookConfiguration).Delete(name2);
  }
  const validateWebhook = await webhookConfig(assets, "validate", webhookTimeout);
  if (validateWebhook) {
    logger_default.info("Applying validating webhook");
    await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.ValidatingWebhookConfiguration).Apply(validateWebhook, { force });
  } else {
    logger_default.info("Validating webhook not needed, removing if it exists");
    await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.ValidatingWebhookConfiguration).Delete(name2);
  }
  logger_default.info("Applying the Pepr Store CRD if it doesn't exist");
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.CustomResourceDefinition).Apply(peprStoreCRD, { force });
  if (host) {
    return;
  }
  const code = await import_fs3.promises.readFile(path);
  const hash = import_crypto.default.createHash("sha256").update(code).digest("hex");
  if (code.length < 1) {
    throw new Error("No code provided");
  }
  await setupRBAC(name2, assets.capabilities, force);
  await setupController(assets, code, hash, force);
  await setupWatcher(assets, hash, force);
}
async function setupRBAC(name2, capabilities, force) {
  logger_default.info("Applying cluster role binding");
  const crb = clusterRoleBinding(name2);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.ClusterRoleBinding).Apply(crb, { force });
  logger_default.info("Applying cluster role");
  const cr = clusterRole(name2, capabilities);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.ClusterRole).Apply(cr, { force });
  logger_default.info("Applying service account");
  const sa = serviceAccount(name2);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.ServiceAccount).Apply(sa, { force });
  logger_default.info("Applying store role");
  const role = storeRole(name2);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Role).Apply(role, { force });
  logger_default.info("Applying store role binding");
  const roleBinding = storeRoleBinding(name2);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.RoleBinding).Apply(roleBinding, { force });
}
async function setupController(assets, code, hash, force) {
  const { name: name2 } = assets;
  logger_default.info("Applying module secret");
  const mod = moduleSecret(name2, code, hash);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Secret).Apply(mod, { force });
  logger_default.info("Applying controller service");
  const svc = service(name2);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Service).Apply(svc, { force });
  logger_default.info("Applying TLS secret");
  const tls = tlsSecret(name2, assets.tls);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Secret).Apply(tls, { force });
  logger_default.info("Applying API token secret");
  const apiToken = apiTokenSecret(name2, assets.apiToken);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Secret).Apply(apiToken, { force });
  logger_default.info("Applying deployment");
  const dep = deployment(assets, hash, assets.buildTimestamp);
  await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Deployment).Apply(dep, { force });
}
async function setupWatcher(assets, hash, force) {
  const watchDeployment = watcher(assets, hash, assets.buildTimestamp);
  if (watchDeployment) {
    logger_default.info("Applying watcher deployment");
    await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Deployment).Apply(watchDeployment, { force });
    logger_default.info("Applying watcher service");
    const watchSvc = watcherService(assets.name);
    await (0, import_kubernetes_fluent_client3.K8s)(import_kubernetes_fluent_client3.kind.Service).Apply(watchSvc, { force });
  }
}

// src/lib/assets/loader.ts
var import_child_process = require("child_process");
function loadCapabilities(path) {
  return new Promise((resolve5, reject) => {
    const program2 = (0, import_child_process.fork)(path, {
      env: {
        ...process.env,
        LOG_LEVEL: "warn",
        PEPR_MODE: "build"
      }
    });
    program2.on("message", (message) => {
      const capabilities = message.valueOf();
      for (const capability of capabilities) {
        console.info(`Registered Pepr Capability "${capability.name}"`);
      }
      resolve5(capabilities);
    });
    program2.on("error", (error) => {
      reject(error);
    });
  });
}

// src/lib/assets/yaml.ts
var import_client_node = require("@kubernetes/client-node");
var import_crypto2 = __toESM(require("crypto"));
var import_fs4 = require("fs");
async function overridesFile({ hash, name: name2, image, config, apiToken }, path) {
  const overrides = {
    secrets: {
      apiToken: Buffer.from(apiToken).toString("base64")
    },
    hash,
    namespace: {
      annotations: {},
      labels: {
        "pepr.dev": ""
      }
    },
    uuid: name2,
    admission: {
      terminationGracePeriodSeconds: 5,
      failurePolicy: config.onError === "reject" ? "Fail" : "Ignore",
      webhookTimeout: config.webhookTimeout,
      env: [
        { name: "PEPR_WATCH_MODE", value: "false" },
        { name: "PEPR_PRETTY_LOG", value: "false" },
        { name: "LOG_LEVEL", value: "info" }
      ],
      image,
      annotations: {
        "pepr.dev/description": `${config.description}` || ""
      },
      labels: {
        app: name2,
        "pepr.dev/controller": "admission",
        "pepr.dev/uuid": config.uuid
      },
      securityContext: {
        runAsUser: 65532,
        runAsGroup: 65532,
        runAsNonRoot: true,
        fsGroup: 65532
      },
      resources: {
        requests: {
          memory: "64Mi",
          cpu: "100m"
        },
        limits: {
          memory: "256Mi",
          cpu: "500m"
        }
      },
      containerSecurityContext: {
        runAsUser: 65532,
        runAsGroup: 65532,
        runAsNonRoot: true,
        allowPrivilegeEscalation: false,
        capabilities: {
          drop: ["ALL"]
        }
      },
      nodeSelector: {},
      tolerations: [],
      affinity: {}
    },
    watcher: {
      terminationGracePeriodSeconds: 5,
      env: [
        { name: "PEPR_WATCH_MODE", value: "true" },
        { name: "PEPR_PRETTY_LOG", value: "false" },
        { name: "LOG_LEVEL", value: "info" }
      ],
      image,
      annotations: {
        "pepr.dev/description": `${config.description}` || ""
      },
      labels: {
        app: `${name2}-watcher`,
        "pepr.dev/controller": "watcher",
        "pepr.dev/uuid": config.uuid
      },
      securityContext: {
        runAsUser: 65532,
        runAsGroup: 65532,
        runAsNonRoot: true,
        fsGroup: 65532
      },
      resources: {
        requests: {
          memory: "64Mi",
          cpu: "100m"
        },
        limits: {
          memory: "256Mi",
          cpu: "500m"
        }
      },
      containerSecurityContext: {
        runAsUser: 65532,
        runAsGroup: 65532,
        runAsNonRoot: true,
        allowPrivilegeEscalation: false,
        capabilities: {
          drop: ["ALL"]
        }
      },
      nodeSelector: {},
      tolerations: [],
      affinity: {}
    }
  };
  if (process.env.PEPR_MODE === "dev") {
    overrides.admission.env.push({ name: "ZARF_VAR", value: "###ZARF_VAR_THING###" });
    overrides.watcher.env.push({ name: "ZARF_VAR", value: "###ZARF_VAR_THING###" });
    overrides.admission.env.push({ name: "MY_CUSTOM_VAR", value: "example-value" });
    overrides.watcher.env.push({ name: "MY_CUSTOM_VAR", value: "example-value" });
  }
  await import_fs4.promises.writeFile(path, (0, import_client_node.dumpYaml)(overrides, { noRefs: true, forceQuotes: true }));
}
function zarfYaml({ name: name2, image, config }, path) {
  const zarfCfg = {
    kind: "ZarfPackageConfig",
    metadata: {
      name: name2,
      description: `Pepr Module: ${config.description}`,
      url: "https://github.com/defenseunicorns/pepr",
      version: `${config.appVersion || "0.0.1"}`
    },
    components: [
      {
        name: "module",
        required: true,
        manifests: [
          {
            name: "module",
            namespace: "pepr-system",
            files: [path]
          }
        ],
        images: [image]
      }
    ]
  };
  return (0, import_client_node.dumpYaml)(zarfCfg, { noRefs: true });
}
async function allYaml(assets, rbacMode) {
  const { name: name2, tls, apiToken, path } = assets;
  const code = await import_fs4.promises.readFile(path);
  assets.hash = import_crypto2.default.createHash("sha256").update(code).digest("hex");
  const mutateWebhook = await webhookConfig(assets, "mutate", assets.config.webhookTimeout);
  const validateWebhook = await webhookConfig(assets, "validate", assets.config.webhookTimeout);
  const watchDeployment = watcher(assets, assets.hash, assets.buildTimestamp);
  const resources = [
    namespace(assets.config.customLabels?.namespace),
    clusterRole(name2, assets.capabilities, rbacMode),
    clusterRoleBinding(name2),
    serviceAccount(name2),
    apiTokenSecret(name2, apiToken),
    tlsSecret(name2, tls),
    deployment(assets, assets.hash, assets.buildTimestamp),
    service(name2),
    watcherService(name2),
    moduleSecret(name2, code, assets.hash),
    storeRole(name2),
    storeRoleBinding(name2)
  ];
  if (mutateWebhook) {
    resources.push(mutateWebhook);
  }
  if (validateWebhook) {
    resources.push(validateWebhook);
  }
  if (watchDeployment) {
    resources.push(watchDeployment);
  }
  return resources.map((r) => (0, import_client_node.dumpYaml)(r, { noRefs: true })).join("---\n");
}

// src/lib/assets/index.ts
var import_path = require("path");

// src/lib/assets/helm.ts
function nsTemplate() {
  return `
    apiVersion: v1
    kind: Namespace
    metadata:
        name: pepr-system
        {{- if .Values.namespace.annotations }}
        annotations:
            {{- toYaml .Values.namespace.annotations | nindent 6 }}
        {{- end }}
        {{- if .Values.namespace.labels }}
        labels:
            {{- toYaml .Values.namespace.labels | nindent 6 }}
        {{- end }}
    `;
}
function chartYaml(name2, description) {
  return `
    apiVersion: v2
    name: ${name2}
    description: ${description || ""}

    # A chart can be either an 'application' or a 'library' chart.
    #
    # Application charts are a collection of templates that can be packaged into versioned archives
    # to be deployed.
    #
    # Library charts provide useful utilities or functions for the chart developer. They're included as
    # a dependency of application charts to inject those utilities and functions into the rendering
    # pipeline. Library charts do not define any templates and therefore cannot be deployed.
    type: application

    # This is the chart version. This version number should be incremented each time you make changes
    # to the chart and its templates, including the app version.
    # Versions are expected to follow Semantic Versioning (https://semver.org/)
    version: 0.1.0

    # This is the version number of the application being deployed. This version number should be
    # incremented each time you make changes to the application. Versions are not expected to
    # follow Semantic Versioning. They should reflect the version the application is using.
    # It is recommended to use it with quotes.
    appVersion: "1.16.0"
`;
}
function watcherDeployTemplate(buildTimestamp) {
  return `
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{ .Values.uuid }}-watcher
        namespace: pepr-system
        annotations:
          {{- toYaml .Values.watcher.annotations | nindent 4 }}
        labels:
          {{- toYaml .Values.watcher.labels | nindent 4 }}
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            app: {{ .Values.uuid }}-watcher
            pepr.dev/controller: watcher
        template:
          metadata:
            annotations: 
              buildTimestamp: "${buildTimestamp}"
            labels:
              app: {{ .Values.uuid }}-watcher
              pepr.dev/controller: watcher
          spec:
            terminationGracePeriodSeconds: {{ .Values.watcher.terminationGracePeriodSeconds }}
            serviceAccountName: {{ .Values.uuid }}
            securityContext:
              {{- toYaml .Values.admission.securityContext | nindent 8 }}
            containers:
              - name: watcher
                image: {{ .Values.watcher.image }}
                imagePullPolicy: IfNotPresent
                command:
                  - node
                  - /app/node_modules/pepr/dist/controller.js
                  - {{ .Values.hash }}
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 3000
                    scheme: HTTPS
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 3000
                    scheme: HTTPS
                ports:
                  - containerPort: 3000
                resources:
                  {{- toYaml .Values.watcher.resources | nindent 12 }}
                env:
                  {{- toYaml .Values.watcher.env | nindent 12 }}
                securityContext:
                  {{- toYaml .Values.watcher.containerSecurityContext | nindent 12 }}
                volumeMounts:
                  - name: tls-certs
                    mountPath: /etc/certs
                    readOnly: true
                  - name: module
                    mountPath: /app/load
                    readOnly: true
            volumes:
              - name: tls-certs
                secret:
                  secretName: {{ .Values.uuid }}-tls
              - name: module
                secret:
                  secretName: {{ .Values.uuid }}-module
    `;
}
function admissionDeployTemplate(buildTimestamp) {
  return `
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{ .Values.uuid }}
        namespace: pepr-system
        annotations:
          {{- toYaml .Values.admission.annotations | nindent 4 }}
        labels:
          {{- toYaml .Values.admission.labels | nindent 4 }}
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: {{ .Values.uuid }}
            pepr.dev/controller: admission
        template:
          metadata:
            annotations:
              buildTimestamp: "${buildTimestamp}"
            labels:
              app: {{ .Values.uuid }}
              pepr.dev/controller: admission
          spec:
            terminationGracePeriodSeconds: {{ .Values.admission.terminationGracePeriodSeconds }}
            priorityClassName: system-node-critical
            serviceAccountName: {{ .Values.uuid }}
            securityContext:
              {{- toYaml .Values.admission.securityContext | nindent 8 }}
            containers:
              - name: server
                image: {{ .Values.admission.image }}
                imagePullPolicy: IfNotPresent
                command:
                  - node
                  - /app/node_modules/pepr/dist/controller.js
                  - {{ .Values.hash }}
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 3000
                    scheme: HTTPS
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 3000
                    scheme: HTTPS
                ports:
                  - containerPort: 3000
                resources:
                  {{- toYaml .Values.admission.resources | nindent 12 }}
                env:
                  {{- toYaml .Values.admission.env | nindent 12 }}
                securityContext:
                  {{- toYaml .Values.admission.containerSecurityContext | nindent 12 }}
                volumeMounts:
                  - name: tls-certs
                    mountPath: /etc/certs
                    readOnly: true
                  - name: api-token
                    mountPath: /app/api-token
                    readOnly: true
                  - name: module
                    mountPath: /app/load
                    readOnly: true
            volumes:
              - name: tls-certs
                secret:
                  secretName: {{ .Values.uuid }}-tls
              - name: api-token
                secret:
                  secretName: {{ .Values.uuid }}-api-token
              - name: module
                secret:
                  secretName: {{ .Values.uuid }}-module  
    `;
}

// src/lib/assets/index.ts
var import_fs5 = require("fs");
var Assets = class {
  constructor(config, path, host) {
    this.config = config;
    this.path = path;
    this.host = host;
    this.name = `pepr-${config.uuid}`;
    this.buildTimestamp = `${Date.now()}`;
    this.alwaysIgnore = config.alwaysIgnore;
    this.image = `ghcr.io/defenseunicorns/pepr/controller:v${config.peprVersion}`;
    this.hash = "";
    this.tls = genTLS(this.host || `${this.name}.pepr-system.svc`);
    this.apiToken = import_crypto3.default.randomBytes(32).toString("hex");
  }
  name;
  tls;
  apiToken;
  alwaysIgnore;
  capabilities;
  image;
  buildTimestamp;
  hash;
  setHash = (hash) => {
    this.hash = hash;
  };
  deploy = async (force, webhookTimeout) => {
    this.capabilities = await loadCapabilities(this.path);
    await deploy(this, force, webhookTimeout);
  };
  zarfYaml = (path) => zarfYaml(this, path);
  allYaml = async (rbacMode) => {
    this.capabilities = await loadCapabilities(this.path);
    for (const capability of this.capabilities) {
      namespaceComplianceValidator(capability, this.alwaysIgnore.namespaces);
    }
    return allYaml(this, rbacMode);
  };
  generateHelmChart = async (basePath) => {
    const CHART_DIR = `${basePath}/${this.config.uuid}-chart`;
    const CHAR_TEMPLATES_DIR = `${CHART_DIR}/templates`;
    const valuesPath = (0, import_path.resolve)(CHART_DIR, `values.yaml`);
    const chartPath = (0, import_path.resolve)(CHART_DIR, `Chart.yaml`);
    const nsPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `namespace.yaml`);
    const watcherSVCPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `watcher-service.yaml`);
    const admissionSVCPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `admission-service.yaml`);
    const mutationWebhookPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `mutation-webhook.yaml`);
    const validationWebhookPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `validation-webhook.yaml`);
    const admissionDeployPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `admission-deployment.yaml`);
    const watcherDeployPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `watcher-deployment.yaml`);
    const tlsSecretPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `tls-secret.yaml`);
    const apiTokenSecretPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `api-token-secret.yaml`);
    const moduleSecretPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `module-secret.yaml`);
    const storeRolePath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `store-role.yaml`);
    const storeRoleBindingPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `store-role-binding.yaml`);
    const clusterRolePath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `cluster-role.yaml`);
    const clusterRoleBindingPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `cluster-role-binding.yaml`);
    const serviceAccountPath = (0, import_path.resolve)(CHAR_TEMPLATES_DIR, `service-account.yaml`);
    try {
      await createDirectoryIfNotExists(CHART_DIR);
      await createDirectoryIfNotExists(`${CHART_DIR}/charts`);
      await createDirectoryIfNotExists(`${CHAR_TEMPLATES_DIR}`);
      await overridesFile(this, valuesPath);
      await import_fs5.promises.writeFile(chartPath, dedent(chartYaml(this.config.uuid, this.config.description || "")));
      await import_fs5.promises.writeFile(nsPath, dedent(nsTemplate()));
      const code = await import_fs5.promises.readFile(this.path);
      await import_fs5.promises.writeFile(watcherSVCPath, (0, import_client_node2.dumpYaml)(watcherService(this.name), { noRefs: true }));
      await import_fs5.promises.writeFile(admissionSVCPath, (0, import_client_node2.dumpYaml)(service(this.name), { noRefs: true }));
      await import_fs5.promises.writeFile(tlsSecretPath, (0, import_client_node2.dumpYaml)(tlsSecret(this.name, this.tls), { noRefs: true }));
      await import_fs5.promises.writeFile(apiTokenSecretPath, (0, import_client_node2.dumpYaml)(apiTokenSecret(this.name, this.apiToken), { noRefs: true }));
      await import_fs5.promises.writeFile(moduleSecretPath, (0, import_client_node2.dumpYaml)(moduleSecret(this.name, code, this.hash), { noRefs: true }));
      await import_fs5.promises.writeFile(storeRolePath, (0, import_client_node2.dumpYaml)(storeRole(this.name), { noRefs: true }));
      await import_fs5.promises.writeFile(storeRoleBindingPath, (0, import_client_node2.dumpYaml)(storeRoleBinding(this.name), { noRefs: true }));
      await import_fs5.promises.writeFile(
        clusterRolePath,
        (0, import_client_node2.dumpYaml)(clusterRole(this.name, this.capabilities, "rbac"), { noRefs: true })
      );
      await import_fs5.promises.writeFile(clusterRoleBindingPath, (0, import_client_node2.dumpYaml)(clusterRoleBinding(this.name), { noRefs: true }));
      await import_fs5.promises.writeFile(serviceAccountPath, (0, import_client_node2.dumpYaml)(serviceAccount(this.name), { noRefs: true }));
      const mutateWebhook = await webhookConfig(this, "mutate", this.config.webhookTimeout);
      const validateWebhook = await webhookConfig(this, "validate", this.config.webhookTimeout);
      const watchDeployment = watcher(this, this.hash, this.buildTimestamp);
      if (validateWebhook || mutateWebhook) {
        await import_fs5.promises.writeFile(admissionDeployPath, dedent(admissionDeployTemplate(this.buildTimestamp)));
      }
      if (mutateWebhook) {
        const yamlMutateWebhook = (0, import_client_node2.dumpYaml)(mutateWebhook, { noRefs: true });
        const mutateWebhookTemplate = replaceString(
          replaceString(
            replaceString(yamlMutateWebhook, this.name, "{{ .Values.uuid }}"),
            this.config.onError === "reject" ? "Fail" : "Ignore",
            "{{ .Values.admission.failurePolicy }}"
          ),
          `${this.config.webhookTimeout}` || "10",
          "{{ .Values.admission.webhookTimeout }}"
        );
        await import_fs5.promises.writeFile(mutationWebhookPath, mutateWebhookTemplate);
      }
      if (validateWebhook) {
        const yamlValidateWebhook = (0, import_client_node2.dumpYaml)(validateWebhook, { noRefs: true });
        const validateWebhookTemplate = replaceString(
          replaceString(
            replaceString(yamlValidateWebhook, this.name, "{{ .Values.uuid }}"),
            this.config.onError === "reject" ? "Fail" : "Ignore",
            "{{ .Values.admission.failurePolicy }}"
          ),
          `${this.config.webhookTimeout}` || "10",
          "{{ .Values.admission.webhookTimeout }}"
        );
        await import_fs5.promises.writeFile(validationWebhookPath, validateWebhookTemplate);
      }
      if (watchDeployment) {
        await import_fs5.promises.writeFile(watcherDeployPath, dedent(watcherDeployTemplate(this.buildTimestamp)));
      }
    } catch (err) {
      console.error(`Error generating helm chart: ${err.message}`);
      process.exit(1);
    }
  };
};

// src/cli/init/templates.ts
var import_client_node3 = require("@kubernetes/client-node");
var import_util = require("util");
var import_uuid = require("uuid");

// src/templates/.eslintrc.template.json
var eslintrc_template_default = {
  env: {
    browser: false,
    es2021: true
  },
  extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: ["./tsconfig.json"],
    ecmaVersion: 2022
  },
  plugins: ["@typescript-eslint"],
  ignorePatterns: ["node_modules", "dist"],
  root: true,
  rules: {
    "@typescript-eslint/no-floating-promises": ["error"]
  }
};

// src/templates/.prettierrc.json
var prettierrc_default = {
  arrowParens: "avoid",
  bracketSameLine: false,
  bracketSpacing: true,
  embeddedLanguageFormatting: "auto",
  insertPragma: false,
  printWidth: 80,
  quoteProps: "as-needed",
  requirePragma: false,
  semi: true,
  tabWidth: 2,
  useTabs: false
};

// src/templates/capabilities/hello-pepr.samples.json
var hello_pepr_samples_default = [
  {
    apiVersion: "v1",
    kind: "Namespace",
    metadata: {
      name: "pepr-demo",
      labels: {
        "keep-me": "please",
        "remove-me": "please"
      }
    }
  },
  {
    apiVersion: "v1",
    kind: "Namespace",
    metadata: {
      name: "pepr-demo-2"
    }
  },
  {
    apiVersion: "v1",
    kind: "Secret",
    metadata: {
      name: "secret-1",
      namespace: "pepr-demo"
    },
    data: {
      example: "dW5pY29ybiBtYWdpYw==",
      "binary-data": "iCZQUg8xYucNUqD+8lyl2YcKjYYygvTtiDSEV9b9WKUkxSSLFJTgIWMJ9GcFFYs4T9JCdda51u74jfq8yHzRuEASl60EdTS/NfWgIIFTGqcNRfqMw+vgpyTMmCyJVaJEDFq6AA==",
      "ascii-with-white-space": "VGhpcyBpcyBzb21lIHJhbmRvbSB0ZXh0OgoKICAgIC0gd2l0aCBsaW5lIGJyZWFrcwogICAgLSBhbmQgdGFicw=="
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-1",
      namespace: "pepr-demo"
    },
    data: {
      key: "ex-1-val"
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-2",
      namespace: "pepr-demo"
    },
    data: {
      key: "ex-2-val"
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-evil-cm",
      namespace: "pepr-demo",
      annotations: {
        evil: "true"
      }
    },
    data: {
      key: "ex-evil-cm-val"
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-3",
      namespace: "pepr-demo",
      labels: {
        change: "by-label"
      }
    },
    data: {
      key: "ex-3-val"
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-4",
      namespace: "pepr-demo"
    },
    data: {
      key: "ex-4-val"
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-4a",
      namespace: "pepr-demo-2"
    },
    data: {
      key: "ex-4-val"
    }
  },
  {
    apiVersion: "v1",
    kind: "ConfigMap",
    metadata: {
      name: "example-5",
      namespace: "pepr-demo",
      labels: {
        "chuck-norris": "test"
      }
    },
    data: {
      key: "ex-5-val"
    }
  },
  {
    apiVersion: "apiextensions.k8s.io/v1",
    kind: "CustomResourceDefinition",
    metadata: {
      name: "unicorns.pepr.dev"
    },
    spec: {
      group: "pepr.dev",
      versions: [
        {
          name: "v1",
          served: true,
          storage: true,
          schema: {
            openAPIV3Schema: {
              type: "object",
              properties: {
                spec: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string"
                    },
                    counter: {
                      type: "number"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      scope: "Namespaced",
      names: {
        plural: "unicorns",
        singular: "unicorn",
        kind: "Unicorn"
      }
    }
  }
];

// src/templates/data.json
var gitIgnore = "# Ignore node_modules and Pepr build artifacts\nnode_modules\ndist\ninsecure*\n";
var readmeMd = '# Pepr Module\n\nThis is a Pepr Module. [Pepr](https://github.com/defenseunicorns/pepr) is a type-safe Kubernetes middleware system.\n\nThe `capabilities` directory contains all the capabilities for this module. By default,\na capability is a single typescript file in the format of `capability-name.ts` that is\nimported in the root `pepr.ts` file as `import { HelloPepr } from "./capabilities/hello-pepr";`.\nBecause this is typescript, you can organize this however you choose, e.g. creating a sub-folder\nper-capability or common logic in shared files or folders.\n\nExample Structure:\n\n```\nModule Root\n\u251C\u2500\u2500 package.json\n\u251C\u2500\u2500 pepr.ts\n\u2514\u2500\u2500 capabilities\n    \u251C\u2500\u2500 example-one.ts\n    \u251C\u2500\u2500 example-three.ts\n    \u2514\u2500\u2500 example-two.ts\n```\n';
var peprTS = 'import { PeprModule } from "pepr";\n// cfg loads your pepr configuration from package.json\nimport cfg from "./package.json";\n\n// HelloPepr is a demo capability that is included with Pepr. Comment or delete the line below to remove it.\nimport { HelloPepr } from "./capabilities/hello-pepr";\n\n/**\n * This is the main entrypoint for this Pepr module. It is run when the module is started.\n * This is where you register your Pepr configurations and capabilities.\n */\nnew PeprModule(cfg, [\n  // "HelloPepr" is a demo capability that is included with Pepr. Comment or delete the line below to remove it.\n  HelloPepr,\n\n  // Your additional capabilities go here\n]);\n';
var helloPeprTS = 'import {\n  Capability,\n  K8s,\n  Log,\n  PeprMutateRequest,\n  RegisterKind,\n  a,\n  fetch,\n  fetchStatus,\n  kind,\n} from "pepr";\n\n/**\n *  The HelloPepr Capability is an example capability to demonstrate some general concepts of Pepr.\n *  To test this capability you run `pepr dev`and then run the following command:\n *  `kubectl apply -f capabilities/hello-pepr.samples.yaml`\n */\nexport const HelloPepr = new Capability({\n  name: "hello-pepr",\n  description: "A simple example capability to show how things work.",\n  namespaces: ["pepr-demo", "pepr-demo-2"],\n});\n\n// Use the \'When\' function to create a new action, use \'Store\' to persist data\nconst { When, Store } = HelloPepr;\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (Namespace)                                   *\n * ---------------------------------------------------------------------------------------------------\n *\n * This action removes the label `remove-me` when a Namespace is created.\n * Note we don\'t need to specify the namespace here, because we\'ve already specified\n * it in the Capability definition above.\n */\nWhen(a.Namespace)\n  .IsCreated()\n  .Mutate(ns => ns.RemoveLabel("remove-me"));\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Watch Action with K8s SSA (Namespace)                           *\n * ---------------------------------------------------------------------------------------------------\n *\n * This action watches for the `pepr-demo-2` namespace to be created, then creates a ConfigMap with\n * the name `pepr-ssa-demo` and adds the namespace UID to the ConfigMap data. Because Pepr uses\n * server-side apply for this operation, the ConfigMap will be created or updated if it already exists.\n */\nWhen(a.Namespace)\n  .IsCreated()\n  .WithName("pepr-demo-2")\n  .Watch(async ns => {\n    Log.info("Namespace pepr-demo-2 was created.");\n\n    try {\n      // Apply the ConfigMap using K8s server-side apply\n      await K8s(kind.ConfigMap).Apply({\n        metadata: {\n          name: "pepr-ssa-demo",\n          namespace: "pepr-demo-2",\n        },\n        data: {\n          "ns-uid": ns.metadata.uid,\n        },\n      });\n    } catch (error) {\n      // You can use the Log object to log messages to the Pepr controller pod\n      Log.error(error, "Failed to apply ConfigMap using server-side apply.");\n    }\n\n    // You can share data between actions using the Store, including between different types of actions\n    Store.setItem("watch-data", "This data was stored by a Watch Action.");\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (CM Example 1)                                *\n * ---------------------------------------------------------------------------------------------------\n *\n * This is a single action. They can be in the same file or put imported from other files.\n * In this example, when a ConfigMap is created with the name `example-1`, then add a label and annotation.\n *\n * Equivalent to manually running:\n * `kubectl label configmap example-1 pepr=was-here`\n * `kubectl annotate configmap example-1 pepr.dev=annotations-work-too`\n */\nWhen(a.ConfigMap)\n  .IsCreated()\n  .WithName("example-1")\n  .Mutate(request => {\n    request\n      .SetLabel("pepr", "was-here")\n      .SetAnnotation("pepr.dev", "annotations-work-too");\n\n    // Use the Store to persist data between requests and Pepr controller pods\n    Store.setItem("example-1", "was-here");\n\n    // This data is written asynchronously and can be read back via `Store.getItem()` or `Store.subscribe()`\n    Store.setItem("example-1-data", JSON.stringify(request.Raw.data));\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate & Validate Actions (CM Example 2)                                *\n * ---------------------------------------------------------------------------------------------------\n *\n * This combines 3 different types of actions: \'Mutate\', \'Validate\', and \'Watch\'. The order\n * of the actions is required, but each action is optional. In this example, when a ConfigMap is created\n * with the name `example-2`, then add a label and annotation, validate that the ConfigMap has the label\n * `pepr`, and log the request.\n */\nWhen(a.ConfigMap)\n  .IsCreated()\n  .WithName("example-2")\n  .Mutate(request => {\n    // This Mutate Action will mutate the request before it is persisted to the cluster\n\n    // Use `request.Merge()` to merge the new data with the existing data\n    request.Merge({\n      metadata: {\n        labels: {\n          pepr: "was-here",\n        },\n        annotations: {\n          "pepr.dev": "annotations-work-too",\n        },\n      },\n    });\n  })\n  .Validate(request => {\n    // This Validate Action will validate the request before it is persisted to the cluster\n\n    // Approve the request if the ConfigMap has the label \'pepr\'\n    if (request.HasLabel("pepr")) {\n      return request.Approve();\n    }\n\n    // Otherwise, deny the request with an error message (optional)\n    return request.Deny("ConfigMap must have label \'pepr\'");\n  })\n  .Watch((cm, phase) => {\n    // This Watch Action will watch the ConfigMap after it has been persisted to the cluster\n    Log.info(cm, `ConfigMap was ${phase} with the name example-2`);\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (CM Example 2a)                               *\n * ---------------------------------------------------------------------------------------------------\n *\n * This action shows a simple validation that will deny any ConfigMap that has the\n * annotation `evil`. Note that the `Deny()` function takes an optional second parameter that is a\n * user-defined status code to return.\n */\nWhen(a.ConfigMap)\n  .IsCreated()\n  .Validate(request => {\n    if (request.HasAnnotation("evil")) {\n      return request.Deny("No evil CM annotations allowed.", 400);\n    }\n\n    return request.Approve();\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (CM Example 3)                                *\n * ---------------------------------------------------------------------------------------------------\n *\n * This action combines different styles. Unlike the previous actions, this one will look\n * for any ConfigMap in the `pepr-demo` namespace that has the label `change=by-label` during either\n * CREATE or UPDATE. Note that all conditions added such as `WithName()`, `WithLabel()`, `InNamespace()`,\n * are ANDs so all conditions must be true for the request to be processed.\n */\nWhen(a.ConfigMap)\n  .IsCreatedOrUpdated()\n  .WithLabel("change", "by-label")\n  .Mutate(request => {\n    // The K8s object e are going to mutate\n    const cm = request.Raw;\n\n    // Get the username and uid of the K8s request\n    const { username, uid } = request.Request.userInfo;\n\n    // Store some data about the request in the configmap\n    cm.data["username"] = username;\n    cm.data["uid"] = uid;\n\n    // You can still mix other ways of making changes too\n    request.SetAnnotation("pepr.dev", "making-waves");\n  });\n\n// This action validates the label `change=by-label` is deleted\nWhen(a.ConfigMap)\n  .IsDeleted()\n  .WithLabel("change", "by-label")\n  .Validate(request => {\n    // Log and then always approve the request\n    Log.info("CM with label \'change=by-label\' was deleted.");\n    return request.Approve();\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (CM Example 4)                                *\n * ---------------------------------------------------------------------------------------------------\n *\n * This action show how you can use the `Mutate()` function without an inline function.\n * This is useful if you want to keep your actions small and focused on a single task,\n * or if you want to reuse the same function in multiple actions.\n */\nWhen(a.ConfigMap).IsCreated().WithName("example-4").Mutate(example4Cb);\n\n// This function uses the complete type definition, but is not required.\nfunction example4Cb(cm: PeprMutateRequest<a.ConfigMap>) {\n  cm.SetLabel("pepr.dev/first", "true");\n  cm.SetLabel("pepr.dev/second", "true");\n  cm.SetLabel("pepr.dev/third", "true");\n}\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (CM Example 4a)                                *\n * ---------------------------------------------------------------------------------------------------\n *\n * This is the same as Example 4, except this only operates on a CM in the `pepr-demo-2` namespace.\n * Note because the Capability defines namespaces, the namespace specified here must be one of those.\n * Alternatively, you can remove the namespace from the Capability definition and specify it here.\n */\nWhen(a.ConfigMap)\n  .IsCreated()\n  .InNamespace("pepr-demo-2")\n  .WithName("example-4a")\n  .Mutate(example4Cb);\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (CM Example 5)                                *\n * ---------------------------------------------------------------------------------------------------\n *\n * This action is a bit more complex. It will look for any ConfigMap in the `pepr-demo`\n * namespace that has the label `chuck-norris` during CREATE. When it finds one, it will fetch a\n * random Chuck Norris joke from the API and add it to the ConfigMap. This is a great example of how\n * you can use Pepr to make changes to your K8s objects based on external data.\n *\n * Note the use of the `async` keyword. This is required for any action that uses `await` or `fetch()`.\n *\n * Also note we are passing a type to the `fetch()` function. This is optional, but it will help you\n * avoid mistakes when working with the data returned from the API. You can also use the `as` keyword to\n * cast the data returned from the API.\n *\n * These are equivalent:\n * ```ts\n * const joke = await fetch<TheChuckNorrisJoke>("https://api.chucknorris.io/jokes/random?category=dev");\n * const joke = await fetch("https://api.chucknorris.io/jokes/random?category=dev") as TheChuckNorrisJoke;\n * ```\n *\n * Alternatively, you can drop the type completely:\n *\n * ```ts\n * fetch("https://api.chucknorris.io/jokes/random?category=dev")\n * ```\n */\ninterface TheChuckNorrisJoke {\n  icon_url: string;\n  id: string;\n  url: string;\n  value: string;\n}\n\nWhen(a.ConfigMap)\n  .IsCreated()\n  .WithLabel("chuck-norris")\n  .Mutate(async change => {\n    // Try/catch is not needed as a response object will always be returned\n    const response = await fetch<TheChuckNorrisJoke>(\n      "https://api.chucknorris.io/jokes/random?category=dev",\n    );\n\n    // Instead, check the `response.ok` field\n    if (response.ok) {\n      // Add the Chuck Norris joke to the configmap\n      change.Raw.data["chuck-says"] = response.data.value;\n      return;\n    }\n\n    // You can also assert on different HTTP response codes\n    if (response.status === fetchStatus.NOT_FOUND) {\n      // Do something else\n      return;\n    }\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (Secret Base64 Handling)                      *\n * ---------------------------------------------------------------------------------------------------\n *\n * The K8s JS client provides incomplete support for base64 encoding/decoding handling for secrets,\n * unlike the GO client. To make this less painful, Pepr automatically handles base64 encoding/decoding\n * secret data before and after the action is executed.\n */\nWhen(a.Secret)\n  .IsCreated()\n  .WithName("secret-1")\n  .Mutate(request => {\n    const secret = request.Raw;\n\n    // This will be encoded at the end of all processing back to base64: "Y2hhbmdlLXdpdGhvdXQtZW5jb2Rpbmc="\n    secret.data.magic = "change-without-encoding";\n\n    // You can modify the data directly, and it will be encoded at the end of all processing\n    secret.data.example += " - modified by Pepr";\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (Untyped Custom Resource)                     *\n * ---------------------------------------------------------------------------------------------------\n *\n * Out of the box, Pepr supports all the standard Kubernetes objects. However, you can also create\n * your own types. This is useful if you are working with an Operator that creates custom resources.\n * There are two ways to do this, the first is to use the `When()` function with a `GenericKind`,\n * the second is to create a new class that extends `GenericKind` and use the `RegisterKind()` function.\n *\n * This example shows how to use the `When()` function with a `GenericKind`. Note that you\n * must specify the `group`, `version`, and `kind` of the object (if applicable). This is how Pepr knows\n * if the action should be triggered or not. Since we are using a `GenericKind`,\n * Pepr will not be able to provide any intellisense for the object, so you will need to refer to the\n * Kubernetes API documentation for the object you are working with.\n *\n * You will need to wait for the CRD in `hello-pepr.samples.yaml` to be created, then you can apply\n *\n * ```yaml\n * apiVersion: pepr.dev/v1\n * kind: Unicorn\n * metadata:\n *   name: example-1\n *   namespace: pepr-demo\n * spec:\n *   message: replace-me\n *   counter: 0\n * ```\n */\nWhen(a.GenericKind, {\n  group: "pepr.dev",\n  version: "v1",\n  kind: "Unicorn",\n})\n  .IsCreated()\n  .WithName("example-1")\n  .Mutate(request => {\n    request.Merge({\n      spec: {\n        message: "Hello Pepr without type data!",\n        counter: Math.random(),\n      },\n    });\n  });\n\n/**\n * ---------------------------------------------------------------------------------------------------\n *                                   Mutate Action (Typed Custom Resource)                       *\n * ---------------------------------------------------------------------------------------------------\n *\n * This example shows how to use the `RegisterKind()` function to create a new type. This is useful\n * if you are working with an Operator that creates custom resources and you want to have intellisense\n * for the object. Note that you must specify the `group`, `version`, and `kind` of the object (if applicable)\n * as this is how Pepr knows if the action should be triggered or not.\n *\n * Once you register a new Kind with Pepr, you can use the `When()` function with the new Kind. Ideally,\n * you should register custom Kinds at the top of your Capability file or Pepr Module so they are available\n * to all actions, but we are putting it here for demonstration purposes.\n *\n * You will need to wait for the CRD in `hello-pepr.samples.yaml` to be created, then you can apply\n *\n * ```yaml\n * apiVersion: pepr.dev/v1\n * kind: Unicorn\n * metadata:\n *   name: example-2\n *   namespace: pepr-demo\n * spec:\n *   message: replace-me\n *   counter: 0\n * ```*\n */\nclass UnicornKind extends a.GenericKind {\n  spec: {\n    /**\n     * JSDoc comments can be added to explain more details about the field.\n     *\n     * @example\n     * ```ts\n     * request.Raw.spec.message = "Hello Pepr!";\n     * ```\n     * */\n    message: string;\n    counter: number;\n  };\n}\n\nRegisterKind(UnicornKind, {\n  group: "pepr.dev",\n  version: "v1",\n  kind: "Unicorn",\n});\n\nWhen(UnicornKind)\n  .IsCreated()\n  .WithName("example-2")\n  .Mutate(request => {\n    request.Merge({\n      spec: {\n        message: "Hello Pepr with type data!",\n        counter: Math.random(),\n      },\n    });\n  });\n\n/**\n * A callback function that is called once the Pepr Store is fully loaded.\n */\nStore.onReady(data => {\n  Log.info(data, "Pepr Store Ready");\n});\n';
var packageJSON = { name: "pepr", description: "Kubernetes application engine", author: "Defense Unicorns", homepage: "https://github.com/defenseunicorns/pepr", license: "Apache-2.0", bin: "dist/cli.js", repository: "defenseunicorns/pepr", engines: { node: ">=18.0.0" }, version: "0.28.7", main: "dist/lib.js", types: "dist/lib.d.ts", scripts: { "gen-data-json": "node hack/build-template-data.js", prebuild: "rm -fr dist/* && npm run gen-data-json", build: "tsc && node build.mjs", test: "npm run test:unit && npm run test:journey", "test:unit": "npm run gen-data-json && jest src --coverage --detectOpenHandles --coverageDirectory=./coverage", "test:journey": "npm run test:journey:k3d && npm run test:journey:build && npm run test:journey:image && npm run test:journey:run", "test:journey:prep": "if [ ! -d ./pepr-upgrade-test ]; then git clone https://github.com/defenseunicorns/pepr-upgrade-test.git ; fi", "test:journey-wasm": "npm run test:journey:k3d && npm run test:journey:build && npm run test:journey:image && npm run test:journey:run-wasm", "test:journey:k3d": "k3d cluster delete pepr-dev && k3d cluster create pepr-dev --k3s-arg '--debug@server:0' --wait && kubectl rollout status deployment -n kube-system", "test:journey:build": "npm run build && npm pack", "test:journey:image": "docker buildx build --tag pepr:dev . && k3d image import pepr:dev -c pepr-dev", "test:journey:run": "jest --detectOpenHandles journey/entrypoint.test.ts && npm run test:journey:prep && npm run test:journey:upgrade", "test:journey:run-wasm": "jest --detectOpenHandles journey/entrypoint-wasm.test.ts", "test:journey:upgrade": "npm run test:journey:k3d && npm run test:journey:image && jest --detectOpenHandles journey/pepr-upgrade.test.ts", "format:check": "eslint src && prettier src --check", "format:fix": "eslint src --fix && prettier src --write" }, dependencies: { "@types/ramda": "0.29.11", express: "4.19.2", "fast-json-patch": "3.1.1", "kubernetes-fluent-client": "2.3.0", pino: "8.19.0", "pino-pretty": "11.0.0", "prom-client": "15.1.1", ramda: "0.29.1" }, devDependencies: { "@commitlint/cli": "19.2.1", "@commitlint/config-conventional": "19.1.0", "@jest/globals": "29.7.0", "@types/eslint": "8.56.6", "@types/express": "4.17.21", "@types/node": "18.x.x", "@types/node-forge": "1.3.11", "@types/prompts": "2.4.9", "@types/uuid": "9.0.8", jest: "29.7.0", nock: "13.5.4", "ts-jest": "29.1.2" }, peerDependencies: { "@typescript-eslint/eslint-plugin": "6.15.0", "@typescript-eslint/parser": "6.15.0", commander: "11.1.0", esbuild: "0.19.10", eslint: "8.56.0", "node-forge": "1.3.1", prettier: "3.1.1", prompts: "2.4.2", typescript: "5.3.3", uuid: "9.0.1" } };

// src/templates/pepr.code-snippets.json
var pepr_code_snippets_default = {
  "Create a new Pepr capability": {
    prefix: "create pepr capability",
    body: [
      "import { Capability, a } from 'pepr';",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} = new Capability({",
      "	name: '${TM_FILENAME_BASE}',",
      "	description: '${1:A brief description of this capability.}',",
      "	namespaces: [${2:}],",
      "});",
      "",
      "// Use the 'When' function to create a new action",
      "const { When } = ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
      "",
      "// When(a.<Kind>).Is<Event>().Then(change => change.<changes>",
      "When(${3:})"
    ],
    description: "Creates a new Pepr capability with a specified description, optional namespaces, and adds a When statement for the specified value."
  }
};

// src/templates/settings.json
var settings_default = {
  "debug.javascript.terminalOptions": {
    enableTurboSourcemaps: true,
    resolveSourceMapLocations: [
      "${workspaceFolder}/**",
      "node_modules/kubernetes-fluent-client/**",
      "node_modules/pepr/**"
    ]
  }
};

// src/templates/tsconfig.module.json
var tsconfig_module_default = {
  compilerOptions: {
    allowSyntheticDefaultImports: true,
    declaration: true,
    declarationMap: true,
    emitDeclarationOnly: true,
    esModuleInterop: true,
    lib: ["ES2022"],
    module: "CommonJS",
    moduleResolution: "node",
    outDir: "dist",
    resolveJsonModule: true,
    rootDir: ".",
    strict: false,
    target: "ES2022",
    useUnknownInCatchVariables: false
  },
  include: ["**/*.ts"]
};

// src/cli/init/utils.ts
var import_fs6 = require("fs");
function sanitizeName(name2) {
  let sanitized = name2.toLowerCase().replace(/[^a-z0-9-]+/gi, "-");
  sanitized = sanitized.replace(/^-+|-+$/g, "");
  sanitized = sanitized.replace(/--+/g, "-");
  return sanitized;
}
async function createDir(dir) {
  try {
    await import_fs6.promises.mkdir(dir);
  } catch (err) {
    if (err && err.code === "EEXIST") {
      throw new Error(`Directory ${dir} already exists`);
    } else {
      throw err;
    }
  }
}
function write(path, data) {
  if (typeof data !== "string") {
    data = JSON.stringify(data, null, 2);
  }
  return import_fs6.promises.writeFile(path, data);
}

// src/cli/init/templates.ts
var { dependencies, devDependencies, peerDependencies, scripts, version: version2 } = packageJSON;
function genPkgJSON(opts, pgkVerOverride) {
  const uuid = (0, import_uuid.v5)(opts.name, (0, import_uuid.v4)());
  const name2 = sanitizeName(opts.name);
  const { typescript } = peerDependencies;
  const testEnv = {
    MY_CUSTOM_VAR: "example-value",
    ZARF_VAR: "###ZARF_VAR_THING###"
  };
  const data = {
    name: name2,
    version: "0.0.1",
    description: opts.description,
    keywords: ["pepr", "k8s", "policy-engine", "pepr-module", "security"],
    engines: {
      node: ">=18.0.0"
    },
    pepr: {
      uuid: pgkVerOverride ? "static-test" : uuid,
      onError: opts.errorBehavior,
      webhookTimeout: 10,
      customLabels: {
        namespace: {
          "pepr.dev": ""
        }
      },
      alwaysIgnore: {
        namespaces: []
      },
      includedFiles: [],
      env: pgkVerOverride ? testEnv : {}
    },
    scripts: {
      "k3d-setup": scripts["test:journey:k3d"]
    },
    dependencies: {
      pepr: pgkVerOverride || version2
    },
    devDependencies: {
      typescript
    }
  };
  return {
    data,
    path: "package.json",
    print: (0, import_util.inspect)(data, false, 5, true)
  };
}
function genPeprTS() {
  return {
    path: "pepr.ts",
    data: peprTS
  };
}
var readme = {
  path: "README.md",
  data: readmeMd
};
var helloPepr = {
  path: "hello-pepr.ts",
  data: helloPeprTS
};
var gitignore = {
  path: ".gitignore",
  data: gitIgnore
};
var samplesYaml = {
  path: "hello-pepr.samples.yaml",
  data: hello_pepr_samples_default.map((r) => (0, import_client_node3.dumpYaml)(r, { noRefs: true })).join("---\n")
};
var snippet = {
  path: "pepr.code-snippets",
  data: pepr_code_snippets_default
};
var codeSettings = {
  path: "settings.json",
  data: settings_default
};
var tsConfig = {
  path: "tsconfig.json",
  data: tsconfig_module_default
};
var prettier = {
  path: ".prettierrc",
  data: prettierrc_default
};
var eslint = {
  path: ".eslintrc.json",
  data: eslintrc_template_default
};

// src/cli/format.ts
var import_eslint = require("eslint");
var import_fs7 = require("fs");
var import_prettier = require("prettier");
function format_default(program2) {
  program2.command("format").description("Lint and format this Pepr module").option("-v, --validate-only", "Do not modify files, only validate formatting").action(async (opts) => {
    const success = await peprFormat(opts.validateOnly);
    if (success) {
      console.info("\u2705 Module formatted");
    } else {
      process.exit(1);
    }
  });
}
async function peprFormat(validateOnly) {
  {
    try {
      const eslint2 = new import_eslint.ESLint();
      const results = await eslint2.lintFiles(["./**/*.ts"]);
      let hasFailure = false;
      results.forEach(async (result) => {
        const errorCount = result.fatalErrorCount + result.errorCount;
        if (errorCount > 0) {
          hasFailure = true;
        }
      });
      const formatter = await eslint2.loadFormatter("stylish");
      const resultText = await formatter.format(results);
      if (resultText) {
        console.log(resultText);
      }
      if (!validateOnly) {
        await import_eslint.ESLint.outputFixes(results);
      }
      for (const { filePath } of results) {
        const content = await import_fs7.promises.readFile(filePath, "utf8");
        const cfg = await (0, import_prettier.resolveConfig)(filePath);
        const formatted = await (0, import_prettier.format)(content, { filepath: filePath, ...cfg });
        if (validateOnly) {
          if (formatted !== content) {
            hasFailure = true;
            console.error(`File ${filePath} is not formatted correctly`);
          }
        } else {
          await import_fs7.promises.writeFile(filePath, formatted);
        }
      }
      return !hasFailure;
    } catch (e) {
      console.error(e.message);
      return false;
    }
  }
}

// src/cli/build.ts
var import_commander = require("commander");
var peprTS2 = "pepr.ts";
var outputDir = "dist";
function build_default(program2) {
  program2.command("build").description("Build a Pepr Module for deployment").option("-e, --entry-point [file]", "Specify the entry point file to build with.", peprTS2).option(
    "-n, --no-embed",
    "Disables embedding of deployment files into output module.  Useful when creating library modules intended solely for reuse/distribution via NPM."
  ).option(
    "-i, --custom-image <custom-image>",
    "Custom Image: Use custom image for Admission and Watch Deployments."
  ).option(
    "-r, --registry-info [<registry>/<username>]",
    "Registry Info: Image registry and username. Note: You must be signed into the registry"
  ).option("-o, --output-dir <output directory>", "Define where to place build output").option(
    "--timeout <timeout>",
    "How long the API server should wait for a webhook to respond before treating the call as a failure",
    parseTimeout
  ).option(
    "-v, --version <version>. Example: '0.27.3'",
    "The version of the Pepr image to use in the deployment manifests."
  ).addOption(
    new import_commander.Option(
      "--registry <GitHub|Iron Bank>",
      "Container registry: Choose container registry for deployment manifests. Can't be used with --custom-image."
    ).choices(["GitHub", "Iron Bank"])
  ).addOption(
    new import_commander.Option("--rbac-mode [admin|scoped]", "Rbac Mode: admin, scoped (default: admin)").choices(["admin", "scoped"]).default("admin")
  ).action(async (opts) => {
    if (opts.outputDir) {
      outputDir = opts.outputDir;
      createDirectoryIfNotExists(outputDir).catch((error) => {
        console.error(`Error creating output directory: ${error.message}`);
        process.exit(1);
      });
    }
    const { cfg, path, uuid } = await buildModule(void 0, opts.entryPoint, opts.embed);
    const { includedFiles } = cfg.pepr;
    let image = "";
    if (opts.customImage) {
      if (opts.registry) {
        console.error(`Custom Image and registry cannot be used together.`);
        process.exit(1);
      }
      image = opts.customImage;
    }
    if (opts.timeout !== void 0) {
      cfg.pepr.webhookTimeout = opts.timeout;
    }
    if (opts.registryInfo !== void 0) {
      console.info(`Including ${includedFiles.length} files in controller image.`);
      image = `${opts.registryInfo}/custom-pepr-controller:${cfg.pepr.peprVersion}`;
      if (includedFiles.length > 0) {
        await createDockerfile(cfg.pepr.peprVersion, cfg.description, includedFiles);
        (0, import_child_process2.execSync)(`docker build --tag ${image} -f Dockerfile.controller .`, { stdio: "inherit" });
        (0, import_child_process2.execSync)(`docker push ${image}`, { stdio: "inherit" });
      }
    }
    if (!opts.embed) {
      console.info(`\u2705 Module built successfully at ${path}`);
      return;
    }
    if (opts.version) {
      cfg.pepr.peprVersion = opts.version;
    }
    const assets = new Assets(
      {
        ...cfg.pepr,
        appVersion: cfg.version,
        description: cfg.description
      },
      path
    );
    if (opts?.registry == "Iron Bank") {
      console.warn(
        `
	This command assumes the latest release. Pepr's Iron Bank image release cycle is dictated by renovate and is typically released a few days after the GitHub release.
	As an alternative you may consider custom --custom-image to target a specific image and version.`
      );
      image = `registry1.dso.mil/ironbank/opensource/defenseunicorns/pepr/controller:${cfg.pepr.peprVersion}`;
    }
    if (image !== "") {
      assets.image = image;
    }
    const yamlFile = `pepr-module-${uuid}.yaml`;
    const yamlPath = (0, import_path2.resolve)(outputDir, yamlFile);
    const yaml = await assets.allYaml(opts.rbacMode);
    const zarfPath = (0, import_path2.resolve)(outputDir, "zarf.yaml");
    const zarf = assets.zarfYaml(yamlFile);
    await import_fs8.promises.writeFile(yamlPath, yaml);
    await import_fs8.promises.writeFile(zarfPath, zarf);
    await assets.generateHelmChart(outputDir);
    console.info(`\u2705 K8s resource for the module saved to ${yamlPath}`);
  });
}
var externalLibs = Object.keys(dependencies);
externalLibs.push("pepr");
externalLibs.push("@kubernetes/client-node");
async function loadModule(entryPoint = peprTS2) {
  const entryPointPath = (0, import_path2.resolve)(".", entryPoint);
  const modulePath = (0, import_path2.dirname)(entryPointPath);
  const cfgPath = (0, import_path2.resolve)(modulePath, "package.json");
  try {
    await import_fs8.promises.access(cfgPath);
    await import_fs8.promises.access(entryPointPath);
  } catch (e) {
    console.error(
      `Could not find ${cfgPath} or ${entryPointPath} in the current directory. Please run this command from the root of your module's directory.`
    );
    process.exit(1);
  }
  const moduleText = await import_fs8.promises.readFile(cfgPath, { encoding: "utf-8" });
  const cfg = JSON.parse(moduleText);
  const { uuid } = cfg.pepr;
  const name2 = `pepr-${uuid}.js`;
  cfg.pepr.peprVersion = version2;
  if (!uuid) {
    throw new Error("Could not load the uuid in package.json");
  }
  return {
    cfg,
    entryPointPath,
    modulePath,
    name: name2,
    path: (0, import_path2.resolve)(outputDir, name2),
    uuid
  };
}
async function buildModule(reloader, entryPoint = peprTS2, embed = true) {
  try {
    const { cfg, modulePath, path, uuid } = await loadModule(entryPoint);
    const validFormat = await peprFormat(true);
    if (!validFormat) {
      console.log(
        "\x1B[33m%s\x1B[0m",
        "Formatting errors were found. The build will continue, but you may want to run `npx pepr format` to address any issues."
      );
    }
    const npmRoot = (0, import_child_process2.execFileSync)("npm", ["root"]).toString().trim();
    const args = ["--project", `${modulePath}/tsconfig.json`, "--outdir", outputDir];
    (0, import_child_process2.execFileSync)(`${npmRoot}/.bin/tsc`, args);
    const ctxCfg = {
      bundle: true,
      entryPoints: [entryPoint],
      external: externalLibs,
      format: "cjs",
      keepNames: true,
      legalComments: "external",
      metafile: true,
      minify: true,
      outfile: path,
      plugins: [
        {
          name: "reload-server",
          setup(build) {
            build.onEnd(async (r) => {
              if (r?.metafile) {
                console.log(await (0, import_esbuild.analyzeMetafile)(r.metafile));
              }
              if (reloader) {
                await reloader(r);
              }
            });
          }
        }
      ],
      platform: "node",
      sourcemap: true,
      treeShaking: true
    };
    if (reloader) {
      ctxCfg.minify = false;
    }
    if (!embed) {
      ctxCfg.minify = false;
      ctxCfg.outfile = (0, import_path2.resolve)(outputDir, (0, import_path2.basename)(entryPoint, (0, import_path2.extname)(entryPoint))) + ".js";
      ctxCfg.packages = "external";
      ctxCfg.treeShaking = false;
    }
    const ctx = await (0, import_esbuild.context)(ctxCfg);
    if (reloader) {
      await ctx.watch();
    } else {
      await ctx.rebuild();
      await ctx.dispose();
    }
    return { ctx, path, cfg, uuid };
  } catch (e) {
    console.error(e.message);
    if (e.stdout) {
      const out = e.stdout.toString();
      const err = e.stderr.toString();
      console.log(out);
      console.error(err);
      if (out.includes("Types have separate declarations of a private property '_name'.")) {
        const pgkErrMatch = /error TS2322: .*? 'import\("\/.*?\/node_modules\/(.*?)\/node_modules/g;
        out.matchAll(pgkErrMatch);
        const conflicts = [...out.matchAll(pgkErrMatch)];
        if (conflicts.length < 1) {
          console.warn(
            `
	One or more imported Pepr Capabilities seem to be using an incompatible version of Pepr.
	Try updating your Pepr Capabilities to their latest versions.`,
            "Version Conflict"
          );
        }
        conflicts.forEach((match) => {
          console.warn(
            `
	Package '${match[1]}' seems to be incompatible with your current version of Pepr.
	Try updating to the latest version.`,
            "Version Conflict"
          );
        });
      }
    }
    process.exit(1);
  }
}

// src/cli/deploy.ts
var import_prompts = __toESM(require("prompts"));
function deploy_default(program2) {
  program2.command("deploy").description("Deploy a Pepr Module").option("-i, --image [image]", "Override the image tag").option("--confirm", "Skip confirmation prompt").option("--force", "Force deploy the module, override manager field").action(async (opts) => {
    if (!opts.confirm) {
      const confirm2 = await (0, import_prompts.default)({
        type: "confirm",
        name: "confirm",
        message: "This will remove and redeploy the module. Continue?"
      });
      if (!confirm2.confirm) {
        process.exit(0);
      }
    }
    const { cfg, path } = await buildModule();
    const webhook = new Assets(
      {
        ...cfg.pepr,
        description: cfg.description
      },
      path
    );
    if (opts.image) {
      webhook.image = opts.image;
    }
    const timeout = cfg.pepr.webhookTimeout ? cfg.pepr.webhookTimeout : 10;
    try {
      await webhook.deploy(opts.force, timeout);
      await namespaceDeploymentsReady();
      console.info(`\u2705 Module deployed successfully`);
    } catch (e) {
      console.error(`Error deploying module: ${e.message}`);
      process.exit(1);
    }
  });
}

// src/cli/dev.ts
var import_child_process3 = require("child_process");
var import_fs9 = require("fs");
var import_prompts2 = __toESM(require("prompts"));
function dev_default(program2) {
  program2.command("dev").description("Setup a local webhook development environment").option("-h, --host [host]", "Host to listen on", "host.k3d.internal").option("--confirm", "Skip confirmation prompt").action(async (opts) => {
    if (!opts.confirm) {
      const confirm2 = await (0, import_prompts2.default)({
        type: "confirm",
        name: "confirm",
        message: "This will remove and redeploy the module. Continue?"
      });
      if (!confirm2.confirm) {
        process.exit(0);
      }
    }
    const { cfg, path } = await loadModule();
    const webhook = new Assets(
      {
        ...cfg.pepr,
        description: cfg.description
      },
      path,
      opts.host
    );
    await import_fs9.promises.writeFile("insecure-tls.crt", webhook.tls.pem.crt);
    await import_fs9.promises.writeFile("insecure-tls.key", webhook.tls.pem.key);
    try {
      let program3;
      const runFork = async () => {
        console.info(`Running module ${path}`);
        await webhook.deploy(false, 30);
        program3 = (0, import_child_process3.fork)(path, {
          env: {
            ...process.env,
            LOG_LEVEL: "debug",
            PEPR_MODE: "dev",
            PEPR_API_TOKEN: webhook.apiToken,
            PEPR_PRETTY_LOGS: "true",
            SSL_KEY_PATH: "insecure-tls.key",
            SSL_CERT_PATH: "insecure-tls.crt"
          },
          stdio: "inherit"
        });
      };
      await buildModule(async (r) => {
        if (r.errors.length > 0) {
          console.error(`Error compiling module: ${r.errors}`);
          return;
        }
        if (program3) {
          program3.once("exit", runFork);
          program3.kill("SIGKILL");
        } else {
          await runFork();
        }
      });
    } catch (e) {
      console.error(`Error deploying module: ${e.message}`);
      process.exit(1);
    }
  });
}

// src/cli/monitor.ts
var import_client_node4 = require("@kubernetes/client-node");
var import_kubernetes_fluent_client4 = require("kubernetes-fluent-client");
var import_stream = __toESM(require("stream"));
function monitor_default(program2) {
  program2.command("monitor [module-uuid]").description("Monitor a Pepr Module").action(async (uuid) => {
    let labels;
    let errorMessage;
    if (!uuid) {
      labels = ["pepr.dev/controller", "admission"];
      errorMessage = `No pods found with admission labels`;
    } else {
      labels = ["app", `pepr-${uuid}`];
      errorMessage = `No pods found for module ${uuid}`;
    }
    const pods = await (0, import_kubernetes_fluent_client4.K8s)(import_kubernetes_fluent_client4.kind.Pod).InNamespace("pepr-system").WithLabel(labels[0], labels[1]).Get();
    const podNames = pods.items.flatMap((pod) => pod.metadata.name);
    if (podNames.length < 1) {
      console.error(errorMessage);
      process.exit(1);
    }
    const kc = new import_client_node4.KubeConfig();
    kc.loadFromDefault();
    const log = new import_client_node4.Log(kc);
    const logStream = new import_stream.default.PassThrough();
    logStream.on("data", (chunk) => {
      const respMsg = `"msg":"Check response"`;
      const lines = chunk.toString().split("\n");
      for (const line of lines) {
        if (line.includes(respMsg)) {
          try {
            const payload = JSON.parse(line);
            const isMutate = payload.res.patchType || payload.res.warnings;
            const name2 = `${payload.namespace}${payload.name}`;
            const uid = payload.uid;
            if (isMutate) {
              const plainPatch = atob(payload.res.patch) || "";
              const patch = JSON.stringify(JSON.parse(plainPatch), null, 2);
              const patchType = payload.res.patchType || payload.res.warnings || "";
              const allowOrDeny = payload.res.allowed ? "\u{1F500}" : "\u{1F6AB}";
              console.log(`
${allowOrDeny}  MUTATE     ${name2} (${uid})`);
              if (patchType.length > 0) {
                console.log(`
\x1B[1;34m${patch}\x1B[0m`);
              }
            } else {
              const failures = Array.isArray(payload.res) ? payload.res : [payload.res];
              const filteredFailures = failures.filter((r) => !r.allowed).map((r) => r.status.message);
              if (filteredFailures.length > 0) {
                console.log(`
\u274C  VALIDATE   ${name2} (${uid})`);
                console.log(`\x1B[1;31m${filteredFailures}\x1B[0m`);
              } else {
                console.log(`
\u2705  VALIDATE   ${name2} (${uid})`);
              }
            }
          } catch {
            console.warn(`
IGNORED - Unable to parse line: ${line}.`);
          }
        }
      }
    });
    for (const podName of podNames) {
      await log.log("pepr-system", podName, "server", logStream, {
        follow: true,
        pretty: false,
        timestamps: false
      });
    }
  });
}

// src/cli/init/index.ts
var import_child_process4 = require("child_process");
var import_path3 = require("path");
var import_prompts4 = __toESM(require("prompts"));

// src/cli/init/walkthrough.ts
var import_fs10 = require("fs");
var import_prompts3 = __toESM(require("prompts"));

// src/lib/errors.ts
var Errors = {
  audit: "audit",
  ignore: "ignore",
  reject: "reject"
};
var ErrorList = Object.values(Errors);

// src/cli/init/walkthrough.ts
function walkthrough() {
  const askName = {
    type: "text",
    name: "name",
    message: "Enter a name for the new Pepr module. This will create a new directory based on the name.\n",
    validate: async (val) => {
      try {
        const name2 = sanitizeName(val);
        await import_fs10.promises.access(name2, import_fs10.promises.constants.F_OK);
        return "A directory with this name already exists";
      } catch (e) {
        return val.length > 2 || "The name must be at least 3 characters long";
      }
    }
  };
  const askDescription = {
    type: "text",
    name: "description",
    message: "(Recommended) Enter a description for the new Pepr module.\n"
  };
  const askErrorBehavior = {
    type: "select",
    name: "errorBehavior",
    message: "How do you want Pepr to handle errors encountered during K8s operations?",
    choices: [
      {
        title: "Reject the operation",
        value: Errors.reject,
        description: "In the event that Pepr is down or other module errors occur, the operation will not be allowed to continue. (Recommended for production.)"
      },
      {
        title: "Ignore",
        value: Errors.ignore,
        description: "In the event that Pepr is down or other module errors occur, an entry will be generated in the Pepr Controller Log and the operation will be allowed to continue. (Recommended for development, not for production.)",
        selected: true
      },
      {
        title: "Log an audit event",
        value: Errors.audit,
        description: "Pepr will continue processing and generate an entry in the Pepr Controller log as well as an audit event in the cluster."
      }
    ]
  };
  return (0, import_prompts3.default)([askName, askDescription, askErrorBehavior]);
}
async function confirm(dirName, packageJSON2, peprTSPath) {
  console.log(`
  To be generated:

    \x1B[1m${dirName}\x1B[0m
    \u251C\u2500\u2500 \x1B[1m${eslint.path}\x1B[0m
    \u251C\u2500\u2500 \x1B[1m${gitignore.path}\x1B[0m
    \u251C\u2500\u2500 \x1B[1m${prettier.path}\x1B[0m
    \u251C\u2500\u2500 \x1B[1mcapabilties\x1B[0m
    \u2502   \u251C\u2500\u2500 \x1B[1mhello-pepr.samples.yaml\x1B[0m     
    \u2502   \u2514\u2500\u2500 \x1B[1mhello-pepr.ts\x1B[0m     
    \u251C\u2500\u2500 \x1B[1m${packageJSON2.path}\x1B[0m
${packageJSON2.print.replace(/^/gm, "    \u2502   ")}
    \u251C\u2500\u2500 \x1B[1m${peprTSPath}\x1B[0m
    \u251C\u2500\u2500 \x1B[1m${readme.path}\x1B[0m
    \u2514\u2500\u2500 \x1B[1m${tsConfig.path}\x1B[0m
      `);
  const confirm2 = await (0, import_prompts3.default)({
    type: "confirm",
    name: "confirm",
    message: "Create the new Pepr module?"
  });
  return confirm2.confirm;
}

// src/cli/init/index.ts
function init_default(program2) {
  program2.command("init").description("Initialize a new Pepr Module").option("--skip-post-init", "Skip npm install, git init and VSCode launch").action(async (opts) => {
    let pkgOverride = "";
    if (process.env.TEST_MODE === "true") {
      import_prompts4.default.inject(["pepr-test-module", "A test module for Pepr", "ignore", "y"]);
      pkgOverride = "file:../pepr-0.0.0-development.tgz";
    }
    const response = await walkthrough();
    const dirName = sanitizeName(response.name);
    const packageJSON2 = genPkgJSON(response, pkgOverride);
    const peprTS3 = genPeprTS();
    const confirmed = await confirm(dirName, packageJSON2, peprTS3.path);
    if (confirmed) {
      console.log("Creating new Pepr module...");
      try {
        await createDir(dirName);
        await createDir((0, import_path3.resolve)(dirName, ".vscode"));
        await createDir((0, import_path3.resolve)(dirName, "capabilities"));
        await write((0, import_path3.resolve)(dirName, gitignore.path), gitignore.data);
        await write((0, import_path3.resolve)(dirName, eslint.path), eslint.data);
        await write((0, import_path3.resolve)(dirName, prettier.path), prettier.data);
        await write((0, import_path3.resolve)(dirName, packageJSON2.path), packageJSON2.data);
        await write((0, import_path3.resolve)(dirName, readme.path), readme.data);
        await write((0, import_path3.resolve)(dirName, tsConfig.path), tsConfig.data);
        await write((0, import_path3.resolve)(dirName, peprTS3.path), peprTS3.data);
        await write((0, import_path3.resolve)(dirName, ".vscode", snippet.path), snippet.data);
        await write((0, import_path3.resolve)(dirName, ".vscode", codeSettings.path), codeSettings.data);
        await write((0, import_path3.resolve)(dirName, "capabilities", samplesYaml.path), samplesYaml.data);
        await write((0, import_path3.resolve)(dirName, "capabilities", helloPepr.path), helloPepr.data);
        if (!opts.skipPostInit) {
          process.chdir(dirName);
          (0, import_child_process4.execSync)("npm install", {
            stdio: "inherit"
          });
          (0, import_child_process4.execSync)("git init", {
            stdio: "inherit"
          });
          try {
            (0, import_child_process4.execSync)("code .", {
              stdio: "inherit"
            });
          } catch (e) {
          }
        }
        console.log(`New Pepr module created at ${dirName}`);
        console.log(`Open VSCode or your editor of choice in ${dirName} to get started!`);
      } catch (e) {
        if (e instanceof Error) {
          console.error(e.message);
        }
        process.exit(1);
      }
    }
  });
}

// src/cli/uuid.ts
var import_kubernetes_fluent_client5 = require("kubernetes-fluent-client");
function uuid_default(program2) {
  program2.command("uuid [uuid]").description("Module UUID(s) currently deployed in the cluster").action(async (uuid) => {
    const uuidTable = {};
    let deployments;
    if (!uuid) {
      deployments = await (0, import_kubernetes_fluent_client5.K8s)(import_kubernetes_fluent_client5.kind.Deployment).InNamespace("pepr-system").WithLabel("pepr.dev/uuid").Get();
    } else {
      deployments = await (0, import_kubernetes_fluent_client5.K8s)(import_kubernetes_fluent_client5.kind.Deployment).InNamespace("pepr-system").WithLabel("pepr.dev/uuid", uuid).Get();
    }
    deployments.items.map((deploy2) => {
      const uuid2 = deploy2.metadata?.labels?.["pepr.dev/uuid"] || "";
      const description = deploy2.metadata?.annotations?.["pepr.dev/description"] || "";
      if (uuid2 !== "") {
        uuidTable[uuid2] = description;
      }
    });
    console.log("UUID		Description");
    console.log("--------------------------------------------");
    Object.entries(uuidTable).forEach(([uuid2, description]) => {
      console.log(`${uuid2}	${description}`);
    });
  });
}

// src/cli/root.ts
var import_commander2 = require("commander");
var RootCmd = class extends import_commander2.Command {
  // eslint-disable-next-line class-methods-use-this
  createCommand(name2) {
    const cmd = new import_commander2.Command(name2);
    return cmd;
  }
};

// src/cli/update.ts
var import_child_process5 = require("child_process");
var import_fs11 = __toESM(require("fs"));
var import_path4 = require("path");
var import_prompts5 = __toESM(require("prompts"));
function update_default(program2) {
  program2.command("update").description("Update this Pepr module. Not recommended for prod as it may change files.").option("--skip-template-update", "Skip updating the template files").action(async (opts) => {
    if (!opts.skipTemplateUpdate) {
      const { confirm: confirm2 } = await (0, import_prompts5.default)({
        type: "confirm",
        name: "confirm",
        message: "This will overwrite previously auto-generated files including the capabilities/HelloPepr.ts file.\nAre you sure you want to continue?"
      });
      if (!confirm2) {
        return;
      }
    }
    console.log("Updating the Pepr module...");
    try {
      (0, import_child_process5.execSync)("npm install pepr@latest", {
        stdio: "inherit"
      });
      if (!opts.skipTemplateUpdate) {
        (0, import_child_process5.execSync)("npx pepr update-templates", {
          stdio: "inherit"
        });
      }
      console.log(`\u2705 Module updated successfully`);
    } catch (e) {
      console.error(e.message);
      process.exit(1);
    }
  });
  program2.command("update-templates", { hidden: true }).description("Perform template updates").action(async (opts) => {
    console.log("Updating Pepr config and template tiles...");
    try {
      if (!opts.skipTemplateUpdate) {
        await write((0, import_path4.resolve)(prettier.path), prettier.data);
        await write((0, import_path4.resolve)(tsConfig.path), tsConfig.data);
        await write((0, import_path4.resolve)(".vscode", snippet.path), snippet.data);
        await write((0, import_path4.resolve)(".vscode", codeSettings.path), codeSettings.data);
        const samplePath = (0, import_path4.resolve)("capabilities", samplesYaml.path);
        if (import_fs11.default.existsSync(samplePath)) {
          import_fs11.default.unlinkSync(samplePath);
          await write(samplePath, samplesYaml.data);
        }
        const tsPath = (0, import_path4.resolve)("capabilities", helloPepr.path);
        if (import_fs11.default.existsSync(tsPath)) {
          await write(tsPath, helloPepr.data);
        }
      }
    } catch (e) {
      console.error(e.message);
      process.exit(1);
    }
  });
}

// src/cli/kfc.ts
var import_child_process6 = require("child_process");
var import_prompts6 = __toESM(require("prompts"));
function kfc_default(program2) {
  program2.command("kfc [args...]").description("Execute Kubernetes Fluent Client commands").action(async (args) => {
    const { confirm: confirm2 } = await (0, import_prompts6.default)({
      type: "confirm",
      name: "confirm",
      message: "For commands that generate files, this may overwrite any previously generated files.\nAre you sure you want to continue?"
    });
    if (!confirm2) {
      return;
    }
    try {
      if (args.length === 0) {
        args.push("--help");
      }
      const argsString = args.join(" ");
      (0, import_child_process6.execSync)(`kubernetes-fluent-client ${argsString}`, {
        stdio: "inherit"
      });
    } catch (e) {
      console.error(e.message);
      process.exit(1);
    }
  });
}

// src/cli.ts
if (process.env.npm_lifecycle_event !== "npx") {
  console.warn("Pepr should be run via `npx pepr <command>` instead of `pepr <command>`.");
}
var program = new RootCmd();
program.version(version2).description(`Pepr (v${version2}) - Type safe K8s middleware for humans`).action(() => {
  if (program.args.length < 1) {
    console.log(banner);
    program.help();
  } else {
    console.error(`Invalid command '${program.args.join(" ")}'
`);
    program.outputHelp();
    process.exitCode = 1;
  }
});
init_default(program);
build_default(program);
deploy_default(program);
dev_default(program);
update_default(program);
format_default(program);
monitor_default(program);
uuid_default(program);
kfc_default(program);
program.parse();
